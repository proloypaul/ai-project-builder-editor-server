{
  "projectId": "Project_name",
  "files": [
    {
      "path": "backend/package.json",
      "language": "json",
      "type": "file",
      "content": "{\n  \"name\": \"product-backend\",\n  \"type\": \"module\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  },\n  \"dependencies\": {\n    \"cors\": \"^2.8.5\",\n    \"dotenv\": \"^16.0.3\",\n    \"express\": \"^4.18.2\",\n    \"pg\": \"^8.10.0\"\n  }\n}"
    },
    {
      "path": "backend/.env",
      "language": "plaintext",
      "type": "file",
      "content": "DATABASE_URL=postgresql://user:password@localhost:5432/product_demo\nPORT=5000"
    },
    {
      "path": "backend/config/db.js",
      "language": "javascript",
      "type": "file",
      "content": "import { Pool } from 'pg';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n});\n\nexport default pool;\n"
    },
    {
      "path": "backend/models/productModel.js",
      "language": "javascript",
      "type": "file",
      "content": "import db from '../config/db.js';\n\nexport const findAll = async () => {\n  const res = await db.query('SELECT * FROM products');\n  return res.rows;\n};\n\nexport const findById = async (id) => {\n  const res = await db.query('SELECT * FROM products WHERE id = $1', [id]);\n  return res.rows[0];\n};\n\nexport const create = async ({ name, description, price }) => {\n  const res = await db.query(\n    'INSERT INTO products (name, description, price) VALUES ($1, $2, $3) RETURNING *',\n    [name, description, price]\n  );\n  return res.rows[0];\n};\n"
    },
    {
      "path": "backend/services/productService.js",
      "language": "javascript",
      "type": "file",
      "content": "import * as Product from '../models/productModel.js';\n\nexport const getAllProducts = () => Product.findAll();\n\nexport const getProduct = (id) => Product.findById(id);\n\nexport const createProduct = (data) => Product.create(data);\n"
    },
    {
      "path": "backend/controllers/productController.js",
      "language": "javascript",
      "type": "file",
      "content": "import * as productService from '../services/productService.js';\n\nexport const getAllProducts = async (req, res) => {\n  const products = await productService.getAllProducts();\n  res.json(products);\n};\n\nexport const getProductById = async (req, res) => {\n  const product = await productService.getProduct(req.params.id);\n  if (!product) return res.status(404).json({ message: 'Not found' });\n  res.json(product);\n};\n\nexport const createProduct = async (req, res) => {\n  const newProduct = await productService.createProduct(req.body);\n  res.status(201).json(newProduct);\n};\n"
    },
    {
      "path": "backend/routes/productRoutes.js",
      "language": "javascript",
      "type": "file",
      "content": "import express from 'express';\nimport {\n  getAllProducts,\n  getProductById,\n  createProduct,\n} from '../controllers/productController.js';\n\nconst router = express.Router();\n\nrouter.get('/', getAllProducts);\nrouter.get('/:id', getProductById);\nrouter.post('/', createProduct);\n\nexport default router;\n"
    },
    {
      "path": "backend/server.js",
      "language": "javascript",
      "type": "file",
      "content": "import express from 'express';\nimport cors from 'cors';\nimport dotenv from 'dotenv';\nimport productRoutes from './routes/productRoutes.js';\n\ndotenv.config();\n\nconst app = express();\n\napp.use(cors());\napp.use(express.json());\n\napp.use('/api/products', productRoutes);\n\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));\n"
    },
    {
      "path": "frontend/next.config.js",
      "language": "javascript",
      "type": "file",
      "content": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  async rewrites() {\n    return [\n      {\n        source: '/api/:path*',\n        destination: 'http://localhost:5000/api/:path*',\n      },\n    ];\n  },\n};\n\nmodule.exports = nextConfig;\n"
    },
    {
      "path": "frontend/app/page.tsx",
      "language": "typescriptreact",
      "type": "file",
      "content": "import Link from 'next/link';\n\nexport default function Home() {\n  return (\n    <main>\n      <h1>Welcome to Product App</h1>\n      <Link href=\"/products\">Browse Products</Link>\n    </main>\n  );\n}\n"
    },
    {
      "path": "frontend/app/products/page.tsx",
      "language": "typescriptreact",
      "type": "file",
      "content": "import Link from 'next/link';\n\nasync function getProducts() {\n  const res = await fetch('http://localhost:5000/api/products');\n  return res.json();\n}\n\nexport default async function ProductsPage() {\n  const products = await getProducts();\n\n  return (\n    <div>\n      <h1>All Products</h1>\n      <Link href=\"/add\">Add Product</Link>\n      <ul>\n        {products.map((p: any) => (\n          <li key={p.id}>\n            <Link href={`/products/${p.id}`}>{p.name}</Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n"
    },
    {
      "path": "frontend/app/products/[id]/page.tsx",
      "language": "typescriptreact",
      "type": "file",
      "content": "interface ProductProps {\n  params: { id: string };\n}\n\nasync function getProduct(id: string) {\n  const res = await fetch(`http://localhost:5000/api/products/${id}`);\n  return res.json();\n}\n\nexport default async function ProductDetail({ params }: ProductProps) {\n  const product = await getProduct(params.id);\n\n  return (\n    <div>\n      <h1>{product.name}</h1>\n      <p>{product.description}</p>\n      <p>${product.price}</p>\n    </div>\n  );\n}\n"
    },
    {
      "path": "frontend/app/add/page.tsx",
      "language": "typescriptreact",
      "type": "file",
      "content": "'use client';\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\n\nexport default function AddProduct() {\n  const [form, setForm] = useState({ name: '', description: '', price: '' });\n  const router = useRouter();\n\n  const handleChange = (e: any) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = async (e: any) => {\n    e.preventDefault();\n    await fetch('/api/products', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ ...form, price: parseFloat(form.price) }),\n    });\n    router.push('/products');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"name\" placeholder=\"Name\" onChange={handleChange} required />\n      <input name=\"description\" placeholder=\"Description\" onChange={handleChange} />\n      <input name=\"price\" type=\"number\" placeholder=\"Price\" onChange={handleChange} required />\n      <button type=\"submit\">Add Product</button>\n    </form>\n  );\n}\n"
    }
  ],
  "structure": [
    {
      "name": "backend",
      "type": "folder",
      "children": [
        {
          "name": "package.json",
          "type": "file"
        },
        {
          "name": ".env",
          "type": "file"
        },
        {
          "name": "config",
          "type": "folder",
          "children": [
            {
              "name": "db.js",
              "type": "file"
            }
          ]
        },
        {
          "name": "models",
          "type": "folder",
          "children": [
            {
              "name": "productModel.js",
              "type": "file"
            }
          ]
        },
        {
          "name": "services",
          "type": "folder",
          "children": [
            {
              "name": "productService.js",
              "type": "file"
            }
          ]
        },
        {
          "name": "controllers",
          "type": "folder",
          "children": [
            {
              "name": "productController.js",
              "type": "file"
            }
          ]
        },
        {
          "name": "routes",
          "type": "folder",
          "children": [
            {
              "name": "productRoutes.js",
              "type": "file"
            }
          ]
        },
        {
          "name": "server.js",
          "type": "file"
        }
      ]
    },
    {
      "name": "frontend",
      "type": "folder",
      "children": [
        {
          "name": "next.config.js",
          "type": "file"
        },
        {
          "name": "app",
          "type": "folder",
          "children": [
            {
              "name": "page.tsx",
              "type": "file"
            },
            {
              "name": "products",
              "type": "folder",
              "children": [
                {
                  "name": "page.tsx",
                  "type": "file"
                },
                {
                  "name": "[id]",
                  "type": "folder",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file"
                    }
                  ]
                }
              ]
            },
            {
              "name": "add",
              "type": "folder",
              "children": [
                {
                  "name": "page.tsx",
                  "type": "file"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}

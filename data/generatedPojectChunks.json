[
  {
    "type": "imports",
    "fileName": "index.js",
    "folderName": "topmostsourcing-backend/config",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "dotenv <- dotenv (dotenv)"
  },
  {
    "type": "globals",
    "fileName": "index.js",
    "folderName": "topmostsourcing-backend/config",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "app.js",
    "folderName": "topmostsourcing-backend/src",
    "includingClasses": [],
    "includingFunctions": ["start"],
    "actualCode": "express <- express (express)\ncookieParser <- cookie-parser (cookie-parser)\ncors <- cors (cors)\nxss <- xss-clean (xss-clean)\nmongoSanitize <- express-mongo-sanitize (express-mongo-sanitize)\nrateLimit <- express-rate-limit (express-rate-limit)\nhelmet <- helmet (helmet)\nuserRoute <- ./routes/user.route.js (topmostsourcing-backend/src/routes/user.route.js)\ninvestorRoute <- ./routes/investor.route.js (topmostsourcing-backend/src/routes/investor.route.js)\ninvestRoute <- ./routes/invest.route.js (topmostsourcing-backend/src/routes/invest.route.js)\nproductRoute <- ./routes/product.route.js (topmostsourcing-backend/src/routes/product.route.js)\nroiRoute <- ./routes/roi.route.js (topmostsourcing-backend/src/routes/roi.route.js)\nblogRoute <- ./routes/blog.route.js (topmostsourcing-backend/src/routes/blog.route.js)\ncategoryRoute <- ./routes/category.route.js (topmostsourcing-backend/src/routes/category.route.js)\nproductParentCategoryRoute <- ./routes/product-parent-category.route.js (topmostsourcing-backend/src/routes/product-parent-category.route.js)\nproductCategoryRoute <- ./routes/product-category.route.js (topmostsourcing-backend/src/routes/product-category.route.js)\nproductSubategoryRoute <- ./routes/product-subcategory.js (topmostsourcing-backend/src/routes/product-subcategory.js)\ncompression <- compression (compression)"
  },
  {
    "type": "globals",
    "fileName": "app.js",
    "folderName": "topmostsourcing-backend/src",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "start",
    "className": null,
    "parentClassName": null,
    "fileName": "app.js",
    "folderName": "topmostsourcing-backend/src",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async () => {\r\n  try {\r\n    await connectToDB(config.mongoUri);\r\n    app.listen(port, () => {\r\n      console.log(`Server listening on port ${port}`);\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}"
  },
  {
    "type": "imports",
    "fileName": "blog.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "includingClasses": [],
    "includingFunctions": [
      "createBlog",
      "updateBlog",
      "getAllBlog",
      "getBlog",
      "deleteBlog",
      "uploadBlogImages",
      "totalblogs",
      "getAllRelatedBlogs"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "blog.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createBlog",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const blogData = req.body;\r\n  if (!blogData) {\r\n    throw new BadRequest(\"Blog data not found\");\r\n  }\r\n  if (req.file) {\r\n    const blogImage = req.file;\r\n    blogData.imageUrl = blogImage.filename;\r\n  }\r\n  const result = await blogService.createBlogService(blogData);\r\n  return res.status(201).json({ blog: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateBlog",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const blogData = req.body;\r\n  const { id } = req.params;\r\n  if (!blogData || !id) {\r\n    throw new BadRequest(\"Blog data not found\");\r\n  }\r\n  if (req.file) {\r\n    const blogImage = req.file;\r\n    blogData.imageUrl = blogImage.filename;\r\n  }\r\n  const result = await blogService.updateBlogService(blogData, id);\r\n  return res.status(200).json({ blog: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllBlog",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { page, limit, query, category, skipValue } = req.query;\r\n  const blogs = await blogService.getAllBlogService({\r\n    page,\r\n    limit,\r\n    skipValue,\r\n    query,\r\n    category,\r\n  });\r\n\r\n  return res.status(200).json(blogs);\r\n}"
  },
  {
    "type": "function",
    "functionName": "getBlog",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  const blog = await blogService.getBlogService(id);\r\n  return res.status(200).json(blog);\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteBlog",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  await blogService.deleteBlogService(id);\r\n  return res.status(200).json({ message: \"Blog deleted\" });\r\n}"
  },
  {
    "type": "function",
    "functionName": "uploadBlogImages",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  if (!req.file) {\r\n    throw new BadRequest(\"Image not found\");\r\n  }\r\n  const imageUrl = req.file.filename;\r\n  return res.status(200).json({ imageUrl });\r\n}"
  },
  {
    "type": "function",
    "functionName": "totalblogs",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const count = await blogService.getBlogsCount();\r\n  return res.status(200).json({ count });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllRelatedBlogs",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { page, limit, query, category, skipValue } = req.query;\r\n  const { id } = req.params;\r\n  const blogs = await blogService.getAllRelatedlogService({\r\n    page,\r\n    limit,\r\n    skipValue,\r\n    query,\r\n    category,\r\n    id,\r\n  });\r\n  return res.status(200).json({ blogs });\r\n}"
  },
  {
    "type": "imports",
    "fileName": "category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "includingClasses": [],
    "includingFunctions": [
      "createCategory",
      "updateCategory",
      "getAllCategory",
      "getCategory",
      "deleteCategory",
      "totalCategories"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const categoryData = req.body;\r\n  if (!categoryData) {\r\n    throw new BadRequest(\"Category data not found\");\r\n  }\r\n  const result = await categoryService.createCategoryService(categoryData);\r\n  return res.status(201).json({ category: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const categoryData = req.body;\r\n  const { id } = req.params;\r\n  if (!categoryData || !id) {\r\n    throw new BadRequest(\"Category data not found\");\r\n  }\r\n  const result = await categoryService.updateCategoryService(categoryData, id);\r\n  return res.status(200).json({ category: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { page, limit, query } = req.query;\r\n  const categories = await categoryService.getAllCategoryService(\r\n    page,\r\n    limit,\r\n    query\r\n  );\r\n  return res.status(200).json({ categories });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  const category = await categoryService.getCategoryService(id);\r\n  return res.status(200).json({ category });\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  await categoryService.deleteCategoryService(id);\r\n  return res.status(200).json({ message: \"Category deleted\" });\r\n}"
  },
  {
    "type": "function",
    "functionName": "totalCategories",
    "className": null,
    "parentClassName": null,
    "fileName": "category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const count = await categoryService.getCategoryCount();\r\n  return res.status(200).json({ count });\r\n}"
  },
  {
    "type": "imports",
    "fileName": "invest.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "includingClasses": [],
    "includingFunctions": [
      "createInvest",
      "updateInvest",
      "getAllInvest",
      "withdrawFunds"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "invest.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createInvest",
    "className": null,
    "parentClassName": null,
    "fileName": "invest.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const data = req.body;\r\n  const invest = await investService.createInvest(data);\r\n  return res.status(201).json(invest);\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateInvest",
    "className": null,
    "parentClassName": null,
    "fileName": "invest.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  const data = req.body;\r\n  const invest = await investService.updateInvest(id, data);\r\n  return res.status(200).json(invest);\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllInvest",
    "className": null,
    "parentClassName": null,
    "fileName": "invest.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { investorId } = req.params;\r\n  const investments = await investService.getAllInvest(investorId);\r\n  return res.status(200).json(investments);\r\n}"
  },
  {
    "type": "function",
    "functionName": "withdrawFunds",
    "className": null,
    "parentClassName": null,
    "fileName": "invest.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { investorId } = req.params;\r\n  const investments = await investService.withdrawFunds(investorId);\r\n  return res.status(200).json(investments);\r\n}"
  },
  {
    "type": "imports",
    "fileName": "investor.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "includingClasses": [],
    "includingFunctions": ["createInvestor", "loginInvestor", "getInvestor"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "investor.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createInvestor",
    "className": null,
    "parentClassName": null,
    "fileName": "investor.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const data = req.body;\r\n  const investor = await investorService.createInvestor(data);\r\n  return res.status(201).json({ investor });\r\n}"
  },
  {
    "type": "function",
    "functionName": "loginInvestor",
    "className": null,
    "parentClassName": null,
    "fileName": "investor.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { phone } = req.body;\r\n  const investor = await investorService.loginInvestor(phone);\r\n  return res.status(200).json(investor);\r\n}"
  },
  {
    "type": "function",
    "functionName": "getInvestor",
    "className": null,
    "parentClassName": null,
    "fileName": "investor.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  const investor = await investorService.getInvestor(id);\r\n  return res.status(200).json(investor);\r\n}"
  },
  {
    "type": "imports",
    "fileName": "product-category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "includingClasses": [],
    "includingFunctions": [
      "createProductCategory",
      "updateProductCategory",
      "getAllProductCategory",
      "getProductCategory",
      "deleteProductCategory",
      "totalProductCategories"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "product-category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createProductCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const categoryData = req.body;\r\n  if (!categoryData) {\r\n    throw new BadRequest(\"Category data not found\");\r\n  }\r\n  const result = await productCategoryService.createProductCategoryService(\r\n    categoryData\r\n  );\r\n  return res.status(201).json({ category: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateProductCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const categoryData = req.body;\r\n  const { id } = req.params;\r\n  if (!categoryData || !id) {\r\n    throw new BadRequest(\"Category data not found\");\r\n  }\r\n  const result = await productCategoryService.updateProductCategoryService(\r\n    categoryData,\r\n    id\r\n  );\r\n  return res.status(200).json({ category: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllProductCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { page, limit, query, skip, parent } = req.query;\r\n  const categories = await productCategoryService.getAllProductCategoryService(\r\n    page,\r\n    limit,\r\n    query,\r\n    skip,\r\n    parent\r\n  );\r\n  return res.status(200).json({ categories });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  const category = await productCategoryService.getProductCategoryService(id);\r\n  return res.status(200).json({ category });\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteProductCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  await productCategoryService.deleteProductCategoryService(id);\r\n  return res.status(200).json({ message: \"Category deleted\" });\r\n}"
  },
  {
    "type": "function",
    "functionName": "totalProductCategories",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const count = await productCategoryService.getProductCategoryCountService();\r\n  return res.status(200).json({ count });\r\n}"
  },
  {
    "type": "imports",
    "fileName": "product-parent-category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "includingClasses": [],
    "includingFunctions": [
      "createProductParentCategory",
      "updateProductParentCategory",
      "getAllProductParentCategory",
      "getProductParentCategory",
      "deleteProductParentCategory",
      "totalProductParentCategories"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "product-parent-category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createProductParentCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const categoryData = req.body;\r\n  if (!categoryData) {\r\n    throw new BadRequest(\"Parent category data not found\");\r\n  }\r\n  const result =\r\n    await productParentCategoryService.createProductParentCategoryService(\r\n      categoryData\r\n    );\r\n  return res.status(201).json({ parentCategory: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateProductParentCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const categoryData = req.body;\r\n  const { id } = req.params;\r\n  if (!categoryData || !id) {\r\n    throw new BadRequest(\"Parent category data not found\");\r\n  }\r\n  const result =\r\n    await productParentCategoryService.updateProductParentCategoryService(\r\n      categoryData,\r\n      id\r\n    );\r\n  return res.status(200).json({ parentCategory: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllProductParentCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { page, limit, query, skip } = req.query;\r\n  const parentCategories =\r\n    await productParentCategoryService.getAllProductParentCategoryService(\r\n      page,\r\n      limit,\r\n      query,\r\n      skip\r\n    );\r\n  return res.status(200).json({ parentCategories });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductParentCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  const parentCategory =\r\n    await productParentCategoryService.getProductParentCategoryService(id);\r\n  return res.status(200).json({ parentCategory });\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteProductParentCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  await productParentCategoryService.deleteProductParentCategoryService(id);\r\n  return res.status(200).json({ message: \"Parent category deleted\" });\r\n}"
  },
  {
    "type": "function",
    "functionName": "totalProductParentCategories",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const count =\r\n    await productParentCategoryService.getProductParentCategoryCountService();\r\n  return res.status(200).json({ count });\r\n}"
  },
  {
    "type": "imports",
    "fileName": "product-subcategory.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "includingClasses": [],
    "includingFunctions": [
      "createProductSubcategory",
      "updateProductSubcategory",
      "getAllProductSubcategory",
      "getProductSubcategory",
      "deleteProductSubcategory",
      "totalProductSubcategories"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "product-subcategory.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createProductSubcategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const subcategoryData = req.body;\r\n  if (!subcategoryData) {\r\n    throw new BadRequest(\"Subcategory data not found\");\r\n  }\r\n  const result =\r\n    await productSubcategoryService.createProductSubcategoryService(\r\n      subcategoryData\r\n    );\r\n  return res.status(201).json({ subcategory: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateProductSubcategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const subcategoryData = req.body;\r\n  const { id } = req.params;\r\n  if (!subcategoryData || !id) {\r\n    throw new BadRequest(\"Subcategory data not found\");\r\n  }\r\n  const result =\r\n    await productSubcategoryService.updateProductSubcategoryService(\r\n      subcategoryData,\r\n      id\r\n    );\r\n  return res.status(200).json({ subcategory: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllProductSubcategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { page, limit, query, skip, parent } = req.query;\r\n  const subcategories =\r\n    await productSubcategoryService.getAllProductSubcategoryService(\r\n      page,\r\n      limit,\r\n      query,\r\n      skip,\r\n      parent\r\n    );\r\n  return res.status(200).json({ subcategories });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductSubcategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  const subcategory =\r\n    await productSubcategoryService.getProductSubcategoryService(id);\r\n  return res.status(200).json({ subcategory });\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteProductSubcategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  await productSubcategoryService.deleteProductSubcategoryService(id);\r\n  return res.status(200).json({ message: \"Subcategory deleted\" });\r\n}"
  },
  {
    "type": "function",
    "functionName": "totalProductSubcategories",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const count =\r\n    await productSubcategoryService.getProductSubcategoryCountService();\r\n  return res.status(200).json({ count });\r\n}"
  },
  {
    "type": "imports",
    "fileName": "product.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "includingClasses": [],
    "includingFunctions": [
      "createProduct",
      "updateProduct",
      "updateSecondaryImages",
      "getAllProduct",
      "getAllProductExceptOne",
      "getProduct",
      "deleteProduct",
      "totalProducts",
      "requestQuotation"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "product.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createProduct",
    "className": null,
    "parentClassName": null,
    "fileName": "product.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const productData = req.body;\r\n  if (req.files && req.files.primaryImage) {\r\n    const primaryImage = req.files.primaryImage[0];\r\n    productData.imageUrl = primaryImage.filename;\r\n  }\r\n  if (req.files && req.files.secondaryImages) {\r\n    const secondaryImages = req.files.secondaryImages;\r\n    productData.secondaryImages = secondaryImages.map((file) => file.filename);\r\n  }\r\n  if (!productData) {\r\n    throw new BadRequest(\"Product data not found\");\r\n  }\r\n  const result = await productService.createProductService(productData);\r\n  return res.status(201).json({ product: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateProduct",
    "className": null,
    "parentClassName": null,
    "fileName": "product.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const productData = req.body;\r\n  const { id } = req.params;\r\n  if (!productData || !id) {\r\n    throw new BadRequest(\"Product data not found\");\r\n  }\r\n  if (req.files && req.files.primaryImage) {\r\n    const primaryImage = req.files.primaryImage[0];\r\n    productData.imageUrl = primaryImage.filename;\r\n  }\r\n  if (req.files && req.files.secondaryImages) {\r\n    const secondaryImages = req.files.secondaryImages;\r\n    productData.secondaryImages = secondaryImages.map((file) => file.filename);\r\n  }\r\n  const result = await productService.updateProductService(productData, id);\r\n  return res.status(200).json({ product: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateSecondaryImages",
    "className": null,
    "parentClassName": null,
    "fileName": "product.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { image } = req.query;\r\n  const { id } = req.params;\r\n  if (!image || !id) {\r\n    throw new BadRequest(\"Invalid request\");\r\n  }\r\n  const result = await productService.updateSecondaryImagesService(image, id);\r\n  return res.status(200).json({ imageUrl: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllProduct",
    "className": null,
    "parentClassName": null,
    "fileName": "product.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const {\r\n    page,\r\n    limit,\r\n    query,\r\n    skipValue,\r\n    category,\r\n    parentCategory,\r\n    subcategory,\r\n  } = req.query;\r\n  const products = await productService.getAllProductService({\r\n    page,\r\n    limit,\r\n    skipValue,\r\n    query,\r\n    category,\r\n    parentCategory,\r\n    subcategory,\r\n  });\r\n  return res.status(200).json(products);\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllProductExceptOne",
    "className": null,
    "parentClassName": null,
    "fileName": "product.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { page, limit, query, category, skipValue } = req.query;\r\n  const { id } = req.params;\r\n  const products = await productService.getAllProductExceptOneService({\r\n    page,\r\n    limit,\r\n    skipValue,\r\n    query,\r\n    category,\r\n    id,\r\n  });\r\n  return res.status(200).json({ products });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProduct",
    "className": null,
    "parentClassName": null,
    "fileName": "product.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  const product = await productService.getProductService(id);\r\n  return res.status(200).json(product);\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteProduct",
    "className": null,
    "parentClassName": null,
    "fileName": "product.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  await productService.deleteProductService(id);\r\n  return res.status(200).json({ message: \"Product deleted\" });\r\n}"
  },
  {
    "type": "function",
    "functionName": "totalProducts",
    "className": null,
    "parentClassName": null,
    "fileName": "product.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { query, category, parentCategory, subcategory } = req.query;\r\n  const count = await productService.getProductCount({\r\n    query,\r\n    category,\r\n    parentCategory,\r\n    subcategory,\r\n  });\r\n  return res.status(200).json({ count });\r\n}"
  },
  {
    "type": "function",
    "functionName": "requestQuotation",
    "className": null,
    "parentClassName": null,
    "fileName": "product.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const productData = req.body;\r\n  if (req.files && req.files.uploadedFiles) {\r\n    const uploadedFiles = req.files.uploadedFiles;\r\n    productData.uploadedFiles = uploadedFiles.map((file) => file.filename);\r\n  }\r\n  if (!productData) {\r\n    throw new BadRequest(\"Product data not found\");\r\n  }\r\n  const result = await productService.requestQuotationService(productData);\r\n  return res.status(201).json({ success: true, message: \"Request sent!\" });\r\n}"
  },
  {
    "type": "imports",
    "fileName": "roi.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "includingClasses": [],
    "includingFunctions": ["createRoi", "updateRoi", "getAllRoi"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "roi.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createRoi",
    "className": null,
    "parentClassName": null,
    "fileName": "roi.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const data = req.body;\r\n  const roi = await roiService.createRoi(data);\r\n  return res.status(201).json(roi);\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateRoi",
    "className": null,
    "parentClassName": null,
    "fileName": "roi.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  const data = req.body;\r\n  const roi = await roiService.updateRoi(id, data);\r\n  return res.status(200).json(roi);\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllRoi",
    "className": null,
    "parentClassName": null,
    "fileName": "roi.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const rois = await roiService.getAllRoi();\r\n  return res.status(200).json(rois);\r\n}"
  },
  {
    "type": "imports",
    "fileName": "user.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "includingClasses": [],
    "includingFunctions": ["loginUser", "logout", "sendMail"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "user.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "loginUser",
    "className": null,
    "parentClassName": null,
    "fileName": "user.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js",
        "topmostsourcing-backend/src/utils/index.js",
        "topmostsourcing-frontend/src/utils/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const user = await userService.loginUser(req);\r\n  if (!user) {\r\n    throw new BadRequest(\"Something went wrong\");\r\n  }\r\n  attachCookiesToResponse({ res, user });\r\n  return res.status(200).json({ message: \"Login successfull\" });\r\n}"
  },
  {
    "type": "function",
    "functionName": "logout",
    "className": null,
    "parentClassName": null,
    "fileName": "user.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  res.clearCookie(\"top_most_outsourcing_token\");\r\n  return res.status(200).json({ message: \"user logged out\" });\r\n}"
  },
  {
    "type": "function",
    "functionName": "sendMail",
    "className": null,
    "parentClassName": null,
    "fileName": "user.controller.js",
    "folderName": "topmostsourcing-backend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { name, email, phone, subject, mailText } = req.body;\r\n  if (!name || !email || !phone || !subject || !mailText) {\r\n    throw new BadRequest(\"Please provide your details\");\r\n  }\r\n  const result = await userService.sendMailService({\r\n    name,\r\n    email,\r\n    phone,\r\n    subject,\r\n    mailText,\r\n  });\r\n  return res.status(200).json({ message: \"Mail sent\" });\r\n}"
  },
  {
    "type": "imports",
    "fileName": "connect.js",
    "folderName": "topmostsourcing-backend/src/db",
    "includingClasses": [],
    "includingFunctions": ["connectToDB"],
    "actualCode": "mongoose <- mongoose (mongoose)"
  },
  {
    "type": "globals",
    "fileName": "connect.js",
    "folderName": "topmostsourcing-backend/src/db",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "connectToDB",
    "className": null,
    "parentClassName": null,
    "fileName": "connect.js",
    "folderName": "topmostsourcing-backend/src/db",
    "upstreamDependencies": {
      "imports": ["mongoose"],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(url) => {\r\n  return mongoose.connect(url);\r\n}"
  },
  {
    "type": "imports",
    "fileName": "badRequest.js",
    "folderName": "topmostsourcing-backend/src/errors",
    "includingClasses": ["BadRequest"],
    "includingFunctions": [],
    "actualCode": "CustomApiError <- ./customApiError.js (topmostsourcing-backend/src/errors/customApiError.js)"
  },
  {
    "type": "globals",
    "fileName": "badRequest.js",
    "folderName": "topmostsourcing-backend/src/errors",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "BadRequest.constructor",
    "className": "BadRequest",
    "parentClassName": null,
    "fileName": "badRequest.js",
    "folderName": "topmostsourcing-backend/src/errors",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "constructor(message) {\r\n    super(message);\r\n    this.statusCode = StatusCodes.BAD_REQUEST;\r\n  }"
  },
  {
    "type": "imports",
    "fileName": "customApiError.js",
    "folderName": "topmostsourcing-backend/src/errors",
    "includingClasses": ["CustomApiError"],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "customApiError.js",
    "folderName": "topmostsourcing-backend/src/errors",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "CustomApiError.constructor",
    "className": "CustomApiError",
    "parentClassName": null,
    "fileName": "customApiError.js",
    "folderName": "topmostsourcing-backend/src/errors",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "constructor(message) {\r\n    super(message);\r\n  }"
  },
  {
    "type": "imports",
    "fileName": "index.js",
    "folderName": "topmostsourcing-backend/src/errors",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "BadRequest <- ./badRequest.js (topmostsourcing-backend/src/errors/badRequest.js)\nCustomApiError <- ./customApiError.js (topmostsourcing-backend/src/errors/customApiError.js)\nNotFound <- ./notFound.js (topmostsourcing-backend/src/errors/notFound.js)\nUnauthenticated <- ./unauthenticated.js (topmostsourcing-backend/src/errors/unauthenticated.js)\nUnAuthorized <- ./unauthorized.js (topmostsourcing-backend/src/errors/unauthorized.js)"
  },
  {
    "type": "globals",
    "fileName": "index.js",
    "folderName": "topmostsourcing-backend/src/errors",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "notFound.js",
    "folderName": "topmostsourcing-backend/src/errors",
    "includingClasses": ["NotFound"],
    "includingFunctions": [],
    "actualCode": "CustomApiError <- ./customApiError.js (topmostsourcing-backend/src/errors/customApiError.js)"
  },
  {
    "type": "globals",
    "fileName": "notFound.js",
    "folderName": "topmostsourcing-backend/src/errors",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "NotFound.constructor",
    "className": "NotFound",
    "parentClassName": null,
    "fileName": "notFound.js",
    "folderName": "topmostsourcing-backend/src/errors",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "constructor(message) {\r\n    super(message);\r\n    this.statusCode = StatusCodes.NOT_FOUND;\r\n  }"
  },
  {
    "type": "imports",
    "fileName": "unauthenticated.js",
    "folderName": "topmostsourcing-backend/src/errors",
    "includingClasses": ["Unauthenticated"],
    "includingFunctions": [],
    "actualCode": "CustomApiError <- ./customApiError.js (topmostsourcing-backend/src/errors/customApiError.js)"
  },
  {
    "type": "globals",
    "fileName": "unauthenticated.js",
    "folderName": "topmostsourcing-backend/src/errors",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "Unauthenticated.constructor",
    "className": "Unauthenticated",
    "parentClassName": null,
    "fileName": "unauthenticated.js",
    "folderName": "topmostsourcing-backend/src/errors",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "constructor(message) {\r\n    super(message);\r\n    this.statusCode = StatusCodes.FORBIDDEN;\r\n  }"
  },
  {
    "type": "imports",
    "fileName": "unauthorized.js",
    "folderName": "topmostsourcing-backend/src/errors",
    "includingClasses": ["UnAuthorized"],
    "includingFunctions": [],
    "actualCode": "CustomApiError <- ./customApiError.js (topmostsourcing-backend/src/errors/customApiError.js)"
  },
  {
    "type": "globals",
    "fileName": "unauthorized.js",
    "folderName": "topmostsourcing-backend/src/errors",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "UnAuthorized.constructor",
    "className": "UnAuthorized",
    "parentClassName": null,
    "fileName": "unauthorized.js",
    "folderName": "topmostsourcing-backend/src/errors",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "constructor(message) {\r\n    super(message);\r\n    this.statusCode = StatusCodes.UNAUTHORIZED;\r\n  }"
  },
  {
    "type": "imports",
    "fileName": "authenticate.js",
    "folderName": "topmostsourcing-backend/src/middlewares",
    "includingClasses": [],
    "includingFunctions": ["authenticate", "authorizePermission"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "authenticate.js",
    "folderName": "topmostsourcing-backend/src/middlewares",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "authenticate",
    "className": null,
    "parentClassName": null,
    "fileName": "authenticate.js",
    "folderName": "topmostsourcing-backend/src/middlewares",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "(req, res, next) => {\r\n  const token = req.cookies.top_most_outsourcing_token;\r\n  if (!token) {\r\n    throw new Unauthenticated(\"User not authenticated\");\r\n  }\r\n  try {\r\n    const payload = isTokenValid(token);\r\n    req.user = {\r\n      userId: payload.userId,\r\n      role: payload.role,\r\n    };\r\n    next();\r\n  } catch (error) {\r\n    throw new Unauthenticated(\"Authentication failed\");\r\n  }\r\n}"
  },
  {
    "type": "function",
    "functionName": "authorizePermission",
    "className": null,
    "parentClassName": null,
    "fileName": "authenticate.js",
    "folderName": "topmostsourcing-backend/src/middlewares",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "(...roles) => {\r\n  return (req, res, next) => {\r\n    if (!roles.includes(req.user.role)) {\r\n      throw new UnAuthorized(\"Authorization failed\");\r\n    }\r\n    next();\r\n  };\r\n}"
  },
  {
    "type": "imports",
    "fileName": "errorHandler.js",
    "folderName": "topmostsourcing-backend/src/middlewares",
    "includingClasses": [],
    "includingFunctions": ["errorHandlerMiddleware"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "errorHandler.js",
    "folderName": "topmostsourcing-backend/src/middlewares",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "errorHandlerMiddleware",
    "className": null,
    "parentClassName": null,
    "fileName": "errorHandler.js",
    "folderName": "topmostsourcing-backend/src/middlewares",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(err, req, res, next) => {\r\n  let customError = {\r\n    message: err.message || \"Something went wrong\",\r\n    statusCode: err.statusCode || 500,\r\n  };\r\n  if (err.name === \"ValidationError\") {\r\n    customError.message = Object.values(err.errors)\r\n      .map((item) => item.message)\r\n      .join(\",\");\r\n    customError.statusCode = 400;\r\n  }\r\n  if (err.code === \"LIMIT_FILE_SIZE\") {\r\n    customError.message = \"File must be less then 512kb\";\r\n    customError.statusCode = 400;\r\n  }\r\n  if (err.code && err.code === 11000) {\r\n    customError.message = `Duplicate value entered for ${Object.keys(\r\n      err.keyValue\r\n    )} field, please choose another value`;\r\n    customError.statusCode = 400;\r\n  }\r\n  if (err.name === \"CastError\") {\r\n    customError.message = `No item found with id : ${err.value}`;\r\n    customError.statusCode = 404;\r\n  }\r\n  if (err instanceof SyntaxError && err.status === 400 && \"body\" in err) {\r\n    customError.message = \"Invalid JSON syntax\";\r\n    customError.statusCode = 400;\r\n  }\r\n\r\n  return res\r\n    .status(customError.statusCode)\r\n    .json({ message: customError.message });\r\n}"
  },
  {
    "type": "imports",
    "fileName": "routeNotFound.js",
    "folderName": "topmostsourcing-backend/src/middlewares",
    "includingClasses": [],
    "includingFunctions": ["routeNotFound"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "routeNotFound.js",
    "folderName": "topmostsourcing-backend/src/middlewares",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "routeNotFound",
    "className": null,
    "parentClassName": null,
    "fileName": "routeNotFound.js",
    "folderName": "topmostsourcing-backend/src/middlewares",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(req, res) => {\r\n  res.status(404).send(\"Route not found\");\r\n}"
  },
  {
    "type": "imports",
    "fileName": "blog.js",
    "folderName": "topmostsourcing-backend/src/models",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "mongoose <- mongoose (mongoose)"
  },
  {
    "type": "globals",
    "fileName": "blog.js",
    "folderName": "topmostsourcing-backend/src/models",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "category.js",
    "folderName": "topmostsourcing-backend/src/models",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "mongoose <- mongoose (mongoose)"
  },
  {
    "type": "globals",
    "fileName": "category.js",
    "folderName": "topmostsourcing-backend/src/models",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "investments.js",
    "folderName": "topmostsourcing-backend/src/models",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "mongoose <- mongoose (mongoose)"
  },
  {
    "type": "globals",
    "fileName": "investments.js",
    "folderName": "topmostsourcing-backend/src/models",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "investor.js",
    "folderName": "topmostsourcing-backend/src/models",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "mongoose <- mongoose (mongoose)"
  },
  {
    "type": "globals",
    "fileName": "investor.js",
    "folderName": "topmostsourcing-backend/src/models",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "product-category.js",
    "folderName": "topmostsourcing-backend/src/models",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "mongoose <- mongoose (mongoose)"
  },
  {
    "type": "globals",
    "fileName": "product-category.js",
    "folderName": "topmostsourcing-backend/src/models",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "product-parent-category.js",
    "folderName": "topmostsourcing-backend/src/models",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "mongoose <- mongoose (mongoose)"
  },
  {
    "type": "globals",
    "fileName": "product-parent-category.js",
    "folderName": "topmostsourcing-backend/src/models",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-backend/src/models",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "mongoose <- mongoose (mongoose)"
  },
  {
    "type": "globals",
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-backend/src/models",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "product.js",
    "folderName": "topmostsourcing-backend/src/models",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "mongoose <- mongoose (mongoose)"
  },
  {
    "type": "globals",
    "fileName": "product.js",
    "folderName": "topmostsourcing-backend/src/models",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "roi.js",
    "folderName": "topmostsourcing-backend/src/models",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "mongoose <- mongoose (mongoose)"
  },
  {
    "type": "globals",
    "fileName": "roi.js",
    "folderName": "topmostsourcing-backend/src/models",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "user.js",
    "folderName": "topmostsourcing-backend/src/models",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "mongoose <- mongoose (mongoose)\nbcrypt <- bcryptjs (bcryptjs)"
  },
  {
    "type": "globals",
    "fileName": "user.js",
    "folderName": "topmostsourcing-backend/src/models",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "blog.route.js",
    "folderName": "topmostsourcing-backend/src/routes",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "express <- express (express)"
  },
  {
    "type": "globals",
    "fileName": "blog.route.js",
    "folderName": "topmostsourcing-backend/src/routes",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "category.route.js",
    "folderName": "topmostsourcing-backend/src/routes",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "express <- express (express)"
  },
  {
    "type": "globals",
    "fileName": "category.route.js",
    "folderName": "topmostsourcing-backend/src/routes",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "invest.route.js",
    "folderName": "topmostsourcing-backend/src/routes",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "express <- express (express)"
  },
  {
    "type": "globals",
    "fileName": "invest.route.js",
    "folderName": "topmostsourcing-backend/src/routes",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "investor.route.js",
    "folderName": "topmostsourcing-backend/src/routes",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "express <- express (express)"
  },
  {
    "type": "globals",
    "fileName": "investor.route.js",
    "folderName": "topmostsourcing-backend/src/routes",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "product-category.route.js",
    "folderName": "topmostsourcing-backend/src/routes",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "express <- express (express)"
  },
  {
    "type": "globals",
    "fileName": "product-category.route.js",
    "folderName": "topmostsourcing-backend/src/routes",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "product-parent-category.route.js",
    "folderName": "topmostsourcing-backend/src/routes",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "express <- express (express)"
  },
  {
    "type": "globals",
    "fileName": "product-parent-category.route.js",
    "folderName": "topmostsourcing-backend/src/routes",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-backend/src/routes",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "express <- express (express)"
  },
  {
    "type": "globals",
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-backend/src/routes",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "product.route.js",
    "folderName": "topmostsourcing-backend/src/routes",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "express <- express (express)"
  },
  {
    "type": "globals",
    "fileName": "product.route.js",
    "folderName": "topmostsourcing-backend/src/routes",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "roi.route.js",
    "folderName": "topmostsourcing-backend/src/routes",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "express <- express (express)"
  },
  {
    "type": "globals",
    "fileName": "roi.route.js",
    "folderName": "topmostsourcing-backend/src/routes",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "user.route.js",
    "folderName": "topmostsourcing-backend/src/routes",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "express <- express (express)"
  },
  {
    "type": "globals",
    "fileName": "user.route.js",
    "folderName": "topmostsourcing-backend/src/routes",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "blog.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "includingClasses": [],
    "includingFunctions": [
      "createBlogService",
      "getBlogService",
      "getAllBlogService",
      "getAllRelatedlogService",
      "updateBlogService",
      "deleteBlogService",
      "getBlogsCount"
    ],
    "actualCode": "path <- path (path)"
  },
  {
    "type": "globals",
    "fileName": "blog.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createBlogService",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (blogData) => {\r\n  const result = await Blog.create(blogData);\r\n  if (!result) {\r\n    throw new BadRequest(\"Error occured creating blog, retry using valid data\");\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getBlogService",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const blog = await Blog.findById(id);\r\n  if (!blog) {\r\n    throw new NotFound(`No blog found with id ${id}`);\r\n  }\r\n  return blog;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllBlogService",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async ({\r\n  page = 1,\r\n  limit = 10,\r\n  query = \"\",\r\n  category = null,\r\n}) => {\r\n  const skip = (page - 1) * limit;\r\n  let matchConditions = {};\r\n\r\n  if (query) {\r\n    matchConditions.title = { $regex: query, $options: \"i\" };\r\n  }\r\n  if (category) {\r\n    matchConditions.category = { $regex: category, $options: \"i\" };\r\n  }\r\n  const blogs = await Blog.find(matchConditions)\r\n    .skip(skip)\r\n    .limit(limit)\r\n    .sort({ createdAt: -1 });\r\n\r\n  const totalCount = await Blog.countDocuments(matchConditions);\r\n  const totalPages = Math.ceil(totalCount / limit);\r\n\r\n  if (!blogs) {\r\n    return [];\r\n  }\r\n\r\n  return {\r\n    blogs,\r\n    pagination: {\r\n      totalPages,\r\n      page,\r\n      limit,\r\n      hasNextPage: page < totalPages,\r\n      hasPreviousPage: page > 1,\r\n    },\r\n  };\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllRelatedlogService",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async ({\r\n  page = 1,\r\n  limit = 0,\r\n  skipValue = 3,\r\n  query = \"\",\r\n  category = null,\r\n  id = null,\r\n}) => {\r\n  const skip = (page - 1) * skipValue;\r\n  let matchConditions = {};\r\n  if (query) {\r\n    matchConditions.title = { $regex: query, $options: \"i\" };\r\n  }\r\n  if (category) {\r\n    matchConditions.category = { $regex: category, $options: \"i\" };\r\n  }\r\n  if (id) {\r\n    matchConditions._id = { $ne: id };\r\n  }\r\n  const blogs = await Blog.find(matchConditions)\r\n    .skip(skip)\r\n    .limit(limit)\r\n    .sort({ createdAt: -1 });\r\n  if (!blogs) {\r\n    return [];\r\n  }\r\n  return blogs;\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateBlogService",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": ["path"],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (blogData, id) => {\r\n  const oldBlog = await Blog.findById(id);\r\n  if (!oldBlog) {\r\n    throw new NotFound(`No blog found with id ${id}`);\r\n  }\r\n  if (blogData.imageUrl) {\r\n    try {\r\n      const imagePath = path.join(process.cwd(), \"uploads\", oldBlog.imageUrl);\r\n      unlink(imagePath, (err) => {\r\n        if (err) {\r\n          console.log(err.message);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  const updatedBlog = await Blog.findByIdAndUpdate(id, blogData, {\r\n    new: true,\r\n    runValidators: true,\r\n  });\r\n  if (!updatedBlog) {\r\n    throw new BadRequest(\"Error updating blog, retry using valid data\");\r\n  }\r\n  return updatedBlog;\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteBlogService",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": ["path"],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const oldBlog = await Blog.findById(id);\r\n  if (!oldBlog) {\r\n    throw new NotFound(`No blog found with id ${id}`);\r\n  }\r\n  try {\r\n    const imagePath = path.join(process.cwd(), \"uploads\", oldBlog.imageUrl);\r\n    unlink(imagePath, (err) => {\r\n      if (err) {\r\n        console.log(\"No Image found in storage\");\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n\r\n  const result = await Blog.findByIdAndDelete(id);\r\n  if (!result) {\r\n    throw new BadRequest(`No blog found with id ${id}`);\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getBlogsCount",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async () => {\r\n  const count = await Blog.countDocuments();\r\n  return count;\r\n}"
  },
  {
    "type": "imports",
    "fileName": "category.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "includingClasses": [],
    "includingFunctions": [
      "createCategoryService",
      "getCategoryService",
      "getAllCategoryService",
      "updateCategoryService",
      "deleteCategoryService",
      "getCategoryCount"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "category.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "category.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (categoryData) => {\r\n  const result = await Category.create(categoryData);\r\n  if (!result) {\r\n    throw new BadRequest(\r\n      \"Error occured creating category, retry using valid data\"\r\n    );\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "category.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const category = await Category.findById(id);\r\n  if (!category) {\r\n    throw new NotFound(`No category found with id ${id}`);\r\n  }\r\n  return category;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "category.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (page = 1, limit = 0, query = \"\") => {\r\n  const skip = (page - 1) * 10;\r\n  let matchConditions = {};\r\n  if (query) {\r\n    matchConditions = { name: { $regex: query, $options: \"i\" } };\r\n  }\r\n  const categories = await Category.find(matchConditions)\r\n    .skip(skip)\r\n    .limit(limit);\r\n  if (!categories) {\r\n    return [];\r\n  }\r\n  return categories;\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "category.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (categoryData, id) => {\r\n  const updatedCategory = await Category.findByIdAndUpdate(id, categoryData, {\r\n    new: true,\r\n    runValidators: true,\r\n  });\r\n  if (!updatedCategory) {\r\n    throw new BadRequest(\"Error updating category, retry using valid data\");\r\n  }\r\n  return updatedCategory;\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "category.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const result = await Category.findByIdAndDelete(id);\r\n  if (!result) {\r\n    throw new BadRequest(`No category found with id ${id}`);\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getCategoryCount",
    "className": null,
    "parentClassName": null,
    "fileName": "category.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async () => {\r\n  const count = await Category.countDocuments();\r\n  return count;\r\n}"
  },
  {
    "type": "imports",
    "fileName": "invest.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "includingClasses": [],
    "includingFunctions": [
      "createInvest",
      "updateInvest",
      "getAllInvest",
      "withdrawFunds"
    ],
    "actualCode": "NotFound <- ../errors/notFound.js (topmostsourcing-backend/src/errors/notFound.js)"
  },
  {
    "type": "globals",
    "fileName": "invest.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createInvest",
    "className": null,
    "parentClassName": null,
    "fileName": "invest.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": ["../errors/notFound.js"],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/notFound.js",
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (data) => {\r\n  const investor = await Investor.findById(data.investor);\r\n  if (!investor) {\r\n    throw new NotFound(\"Investor not found\");\r\n  }\r\n\r\n  const invest = await Investments.create({\r\n    investor: data.investor,\r\n    amount: Number(data.amount || 0),\r\n    returns: Number(data.amount || 0) * investor.roi,\r\n    investRange: data.investRange,\r\n    status: investmentStatus.APPLIED,\r\n    investPeriod: data.investPeriod,\r\n  });\r\n  return invest;\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateInvest",
    "className": null,
    "parentClassName": null,
    "fileName": "invest.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": ["../errors/notFound.js"],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/notFound.js",
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id, data) => {\r\n  const invest = await Investments.findById(id);\r\n  if (!invest) {\r\n    throw new NotFound(\"Investment not found\");\r\n  }\r\n\r\n  let prevStatus = invest.status;\r\n\r\n  const investor = await Investor.findById(invest.investor);\r\n  if (!investor) {\r\n    throw new NotFound(\"Investor not found\");\r\n  }\r\n\r\n  if (data.investPeriod) invest.investPeriod = data.investPeriod;\r\n  if (data.status) invest.status = data.status;\r\n  if (data.status === investmentStatus.PAID && data.amount) {\r\n    invest.amount = data.amount;\r\n    invest.returns = data.amount * investor.roi;\r\n  }\r\n\r\n  if (\r\n    data.status &&\r\n    prevStatus === investmentStatus.PENDING &&\r\n    data.status === investmentStatus.PAID\r\n  ) {\r\n    investor.totalInvestment += invest.amount;\r\n    investor.totalReturns += invest.returns;\r\n    investor.pendingReturns += invest.returns;\r\n  } else if (\r\n    data.status &&\r\n    prevStatus === investmentStatus.WITHDRAW_REQUESTED &&\r\n    data.status === investmentStatus.WITHDRAWABLE\r\n  ) {\r\n    investor.withdrawableAmount += invest.amount + invest.returns;\r\n  }\r\n  await investor.save();\r\n  await invest.save();\r\n\r\n  return invest;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllInvest",
    "className": null,
    "parentClassName": null,
    "fileName": "invest.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (investorId) => {\r\n  const investments = await Investments.find({\r\n    investor: investorId,\r\n  })\r\n    .sort({ createdAt: -1 })\r\n    .populate(\"investor\");\r\n\r\n  return investments;\r\n}"
  },
  {
    "type": "function",
    "functionName": "withdrawFunds",
    "className": null,
    "parentClassName": null,
    "fileName": "invest.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (investorId) => {\r\n  const updatedInvests = await Investments.updateMany(\r\n    { investor: investorId, status: investmentStatus.WITHDRAWABLE },\r\n    { status: investmentStatus.WITHDRAWN },\r\n    { multi: true }\r\n  );\r\n  return updatedInvests;\r\n}"
  },
  {
    "type": "imports",
    "fileName": "investor.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "includingClasses": [],
    "includingFunctions": [
      "generateId",
      "createInvestor",
      "loginInvestor",
      "getInvestor"
    ],
    "actualCode": "BadRequest <- ../errors/badRequest.js (topmostsourcing-backend/src/errors/badRequest.js)\nNotFound <- ../errors/notFound.js (topmostsourcing-backend/src/errors/notFound.js)\ncrypto <- crypto (crypto)"
  },
  {
    "type": "globals",
    "fileName": "investor.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "generateId",
    "className": null,
    "parentClassName": null,
    "fileName": "investor.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": ["crypto"],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async function generateId() {\r\n  const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n  let id = \"\";\r\n  const bytes = crypto.randomBytes(8);\r\n\r\n  for (let i = 0; i < 8; i++) {\r\n    id += chars[bytes[i] % chars.length];\r\n  }\r\n\r\n  const idExists = await Investor.findOne({ publicId: id });\r\n\r\n  if (idExists) {\r\n    return generateId();\r\n  } else {\r\n    return id;\r\n  }\r\n}"
  },
  {
    "type": "function",
    "functionName": "createInvestor",
    "className": null,
    "parentClassName": null,
    "fileName": "investor.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (data) => {\r\n  const uniqueId = await generateId();\r\n  const investor = await Investor.create({\r\n    ...data,\r\n    publicId: `INV${uniqueId}`,\r\n  });\r\n\r\n  if (data.investRange) {\r\n    await investService.createInvest({\r\n      investor: investor._id,\r\n      investRange: data.investRange,\r\n      investPeriod: data.investPeriod,\r\n    });\r\n  }\r\n  return investor;\r\n}"
  },
  {
    "type": "function",
    "functionName": "loginInvestor",
    "className": null,
    "parentClassName": null,
    "fileName": "investor.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": ["../errors/badRequest.js", "../errors/notFound.js"],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/badRequest.js",
        "topmostsourcing-backend/src/errors/notFound.js",
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (phone) => {\r\n  if (!phone) {\r\n    throw new BadRequest(\"Please provide phone number\");\r\n  }\r\n\r\n  const investor = await Investor.findOne({ phone });\r\n  if (!investor) {\r\n    throw new NotFound(\"Investor not found\");\r\n  }\r\n  return investor;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getInvestor",
    "className": null,
    "parentClassName": null,
    "fileName": "investor.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": ["../errors/notFound.js"],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/notFound.js",
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const investor = await Investor.findById(id);\r\n  if (!investor) {\r\n    throw new NotFound(\"Investor not found\");\r\n  }\r\n  return investor;\r\n}"
  },
  {
    "type": "imports",
    "fileName": "product-category.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "includingClasses": [],
    "includingFunctions": [
      "createProductCategoryService",
      "getProductCategoryService",
      "getAllProductCategoryService",
      "updateProductCategoryService",
      "deleteProductCategoryService",
      "getProductCategoryCountService"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "product-category.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createProductCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (categoryData) => {\r\n  const result = await ProductCategory.create(categoryData);\r\n  if (!result) {\r\n    throw new BadRequest(\r\n      \"Error occured creating category, retry using valid data\"\r\n    );\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const category = await ProductCategory.findById(id);\r\n  if (!category) {\r\n    throw new NotFound(`No category found with id ${id}`);\r\n  }\r\n  return category;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllProductCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (\r\n  page = 1,\r\n  limit = 0,\r\n  query = \"\",\r\n  skipValue = 10,\r\n  parent = \"\"\r\n) => {\r\n  const skip = (page - 1) * skipValue;\r\n  let matchConditions = {};\r\n  if (query) {\r\n    matchConditions = { name: { $regex: query, $options: \"i\" } };\r\n  }\r\n  if (parent) {\r\n    matchConditions = { parentCategory: parent };\r\n  }\r\n  const categories = await ProductCategory.find(matchConditions)\r\n    .skip(skip)\r\n    .limit(limit)\r\n    .sort({ createdAt: -1 });\r\n  if (!categories) {\r\n    return [];\r\n  }\r\n  return categories;\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateProductCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (categoryData, id) => {\r\n  const updatedCategory = await ProductCategory.findByIdAndUpdate(\r\n    id,\r\n    categoryData,\r\n    {\r\n      new: true,\r\n      runValidators: true,\r\n    }\r\n  );\r\n  if (!updatedCategory) {\r\n    throw new BadRequest(\"Error updating category, retry using valid data\");\r\n  }\r\n  return updatedCategory;\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteProductCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const result = await ProductCategory.findByIdAndDelete(id);\r\n  if (!result) {\r\n    throw new BadRequest(`No category found with id ${id}`);\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductCategoryCountService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async () => {\r\n  const count = await ProductCategory.countDocuments();\r\n  return count;\r\n}"
  },
  {
    "type": "imports",
    "fileName": "product-parent-category.js",
    "folderName": "topmostsourcing-backend/src/services",
    "includingClasses": [],
    "includingFunctions": [
      "createProductParentCategoryService",
      "getProductParentCategoryService",
      "getAllProductParentCategoryService",
      "updateProductParentCategoryService",
      "deleteProductParentCategoryService",
      "getProductParentCategoryCountService"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "product-parent-category.js",
    "folderName": "topmostsourcing-backend/src/services",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createProductParentCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (categoryData) => {\r\n  const result = await ProductParentCategory.create(categoryData);\r\n  if (!result) {\r\n    throw new BadRequest(\r\n      \"Error occured creating parent category, retry using valid data\"\r\n    );\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductParentCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const category = await ProductParentCategory.findById(id);\r\n  if (!category) {\r\n    throw new NotFound(`No parent category found with id ${id}`);\r\n  }\r\n  return category;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllProductParentCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (\r\n  page = 1,\r\n  limit = 0,\r\n  query = \"\",\r\n  skipValue = 10\r\n) => {\r\n  const skip = (page - 1) * skipValue;\r\n  let matchConditions = {};\r\n  if (query) {\r\n    matchConditions = { name: { $regex: query, $options: \"i\" } };\r\n  }\r\n  const categories = await ProductParentCategory.find(matchConditions)\r\n    .skip(skip)\r\n    .limit(limit);\r\n  if (!categories) {\r\n    return [];\r\n  }\r\n  return categories;\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateProductParentCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (categoryData, id) => {\r\n  const updatedCategory = await ProductParentCategory.findByIdAndUpdate(\r\n    id,\r\n    categoryData,\r\n    {\r\n      new: true,\r\n      runValidators: true,\r\n    }\r\n  );\r\n  if (!updatedCategory) {\r\n    throw new BadRequest(\r\n      \"Error updating parent category, retry using valid data\"\r\n    );\r\n  }\r\n  return updatedCategory;\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteProductParentCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const result = await ProductParentCategory.findByIdAndDelete(id);\r\n  if (!result) {\r\n    throw new BadRequest(`No category found with id ${id}`);\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductParentCategoryCountService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async () => {\r\n  const count = await ProductParentCategory.countDocuments();\r\n  return count;\r\n}"
  },
  {
    "type": "imports",
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-backend/src/services",
    "includingClasses": [],
    "includingFunctions": [
      "createProductSubcategoryService",
      "getProductSubcategoryService",
      "getAllProductSubcategoryService",
      "updateProductSubcategoryService",
      "deleteProductSubcategoryService",
      "getProductSubcategoryCountService"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-backend/src/services",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createProductSubcategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (categoryData) => {\r\n  const result = await ProductSubcategory.create(categoryData);\r\n  if (!result) {\r\n    throw new BadRequest(\r\n      \"Error occured creating subcategory, retry using valid data\"\r\n    );\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductSubcategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const subcategory = await ProductSubcategory.findById(id);\r\n  if (!subcategory) {\r\n    throw new NotFound(`No subcategory found with id ${id}`);\r\n  }\r\n  return subcategory;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllProductSubcategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (\r\n  page = 1,\r\n  limit = 0,\r\n  query = \"\",\r\n  skipValue = 10,\r\n  parent = \"\"\r\n) => {\r\n  const skip = (page - 1) * skipValue;\r\n  let matchConditions = {};\r\n  if (query) {\r\n    matchConditions = { name: { $regex: query, $options: \"i\" } };\r\n  }\r\n  if (parent) {\r\n    matchConditions = { category: parent };\r\n  }\r\n  const categories = await ProductSubcategory.find(matchConditions)\r\n    .skip(skip)\r\n    .limit(limit)\r\n    .populate(\"category\");\r\n  if (!categories) {\r\n    return [];\r\n  }\r\n  return categories;\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateProductSubcategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (categoryData, id) => {\r\n  const updatedCategory = await ProductSubcategory.findByIdAndUpdate(\r\n    id,\r\n    categoryData,\r\n    {\r\n      new: true,\r\n      runValidators: true,\r\n    }\r\n  );\r\n  if (!updatedCategory) {\r\n    throw new BadRequest(\"Error updating subcategory, retry using valid data\");\r\n  }\r\n  return updatedCategory;\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteProductSubcategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const result = await ProductSubcategory.findByIdAndDelete(id);\r\n  if (!result) {\r\n    throw new BadRequest(`No subcategory found with id ${id}`);\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductSubcategoryCountService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async () => {\r\n  const count = await ProductSubcategory.countDocuments();\r\n  return count;\r\n}"
  },
  {
    "type": "imports",
    "fileName": "product.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "includingClasses": [],
    "includingFunctions": [
      "createProductService",
      "getProductService",
      "getAllProductService",
      "getAllProductExceptOneService",
      "updateProductService",
      "updateSecondaryImagesService",
      "deleteProductService",
      "getProductCount",
      "requestQuotationService"
    ],
    "actualCode": "nodemailer <- nodemailer (nodemailer)\npath <- path (path)"
  },
  {
    "type": "globals",
    "fileName": "product.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createProductService",
    "className": null,
    "parentClassName": null,
    "fileName": "product.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (productData) => {\r\n  const result = await Product.create(productData);\r\n  if (!result) {\r\n    throw new BadRequest(\r\n      \"Error occured creating product, retry using valid data\"\r\n    );\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductService",
    "className": null,
    "parentClassName": null,
    "fileName": "product.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": ["path"],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const product = await Product.findById(id).populate({\r\n    path: \"subcategory\",\r\n    populate: {\r\n      path: \"category\",\r\n      populate: {\r\n        path: \"parentCategory\",\r\n      },\r\n    },\r\n  });\r\n  if (!product) {\r\n    throw new NotFound(`No product found with id ${id}`);\r\n  }\r\n  return product;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllProductService",
    "className": null,
    "parentClassName": null,
    "fileName": "product.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async ({\r\n  page = 1,\r\n  limit = 0,\r\n  skipValue = 1000,\r\n  query = \"\",\r\n  category = \"\",\r\n  parentCategory = \"\",\r\n  subcategory = \"\",\r\n}) => {\r\n  const skip = (page - 1) * skipValue;\r\n  let matchConditions = {};\r\n  if (query) {\r\n    matchConditions.name = { $regex: query, $options: \"i\" };\r\n  }\r\n  if (category) {\r\n    matchConditions.category = category;\r\n  }\r\n  if (parentCategory) {\r\n    matchConditions.parentCategory = parentCategory;\r\n  }\r\n  if (subcategory) {\r\n    matchConditions.subcategory = subcategory;\r\n  }\r\n  const products = await Product.find(matchConditions)\r\n    .skip(skip)\r\n    .limit(limit)\r\n    .sort({ createdAt: -1 })\r\n    .populate(\"subcategory\")\r\n    .populate(\"category\")\r\n    .populate(\"parentCategory\");\r\n\r\n  return products;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllProductExceptOneService",
    "className": null,
    "parentClassName": null,
    "fileName": "product.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async ({\r\n  page = 1,\r\n  limit = 0,\r\n  skipValue = 10,\r\n  query = \"\",\r\n  category = \"\",\r\n  id = null,\r\n}) => {\r\n  const skip = (page - 1) * skipValue;\r\n  let matchConditions = {};\r\n  if (query) {\r\n    matchConditions.name = { $regex: query, $options: \"i\" };\r\n  }\r\n  if (category) {\r\n    matchConditions.category = category;\r\n  }\r\n  if (id) {\r\n    matchConditions._id = { $ne: id };\r\n  }\r\n  const products = await Product.find(matchConditions)\r\n    .skip(skip)\r\n    .limit(limit)\r\n    .sort({ createdAt: -1 })\r\n    .populate(\"subcategory\")\r\n    .populate(\"category\")\r\n    .populate(\"parentCategory\");\r\n  return products;\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateProductService",
    "className": null,
    "parentClassName": null,
    "fileName": "product.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": ["path"],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (productData, id) => {\r\n  const oldProduct = await Product.findById(id);\r\n  if (!oldProduct) {\r\n    throw new NotFound(`No product found with id ${id}`);\r\n  }\r\n  if (productData.imageUrl) {\r\n    try {\r\n      const imagePath = path.join(\r\n        process.cwd(),\r\n        \"uploads\",\r\n        oldProduct.imageUrl\r\n      );\r\n      unlink(imagePath, (err) => {\r\n        if (err) {\r\n          console.log(err.message);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  if (productData.secondaryImages) {\r\n    productData.secondaryImages = [\r\n      ...oldProduct.secondaryImages,\r\n      ...productData.secondaryImages,\r\n    ];\r\n  }\r\n  const updatedProduct = await Product.findByIdAndUpdate(id, productData, {\r\n    new: true,\r\n  });\r\n  if (!updatedProduct) {\r\n    throw new BadRequest(\"Error updating product, retry using valid data\");\r\n  }\r\n  return updatedProduct;\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateSecondaryImagesService",
    "className": null,
    "parentClassName": null,
    "fileName": "product.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": ["path"],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (image, id) => {\r\n  const oldProduct = await Product.findById(id);\r\n  if (!oldProduct) {\r\n    throw new NotFound(`No product found with id ${id}`);\r\n  }\r\n  if (image) {\r\n    try {\r\n      const imagePath = path.join(process.cwd(), \"uploads\", image);\r\n      unlink(imagePath, (err) => {\r\n        if (err) {\r\n          console.log(err.message);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  let updatedSecondaryImages = oldProduct?.secondaryImages?.filter(\r\n    (prevImage) => prevImage !== image\r\n  );\r\n  const updatedProduct = await Product.findByIdAndUpdate(\r\n    id,\r\n    { secondaryImages: updatedSecondaryImages },\r\n    {\r\n      new: true,\r\n    }\r\n  );\r\n  if (!updatedProduct) {\r\n    throw new BadRequest(\"Error updating product, retry using valid data\");\r\n  }\r\n  return image;\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteProductService",
    "className": null,
    "parentClassName": null,
    "fileName": "product.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": ["path"],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const oldProduct = await Product.findById(id);\r\n  if (!oldProduct) {\r\n    throw new NotFound(`No product found with id ${id}`);\r\n  }\r\n  try {\r\n    const imagePath = path.join(process.cwd(), \"uploads\", oldProduct.imageUrl);\r\n    unlink(imagePath, (err) => {\r\n      if (err) {\r\n        console.log(err.message);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n\r\n  const result = await Product.findByIdAndDelete(id);\r\n  if (!result) {\r\n    throw new BadRequest(`No product found with id ${id}`);\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductCount",
    "className": null,
    "parentClassName": null,
    "fileName": "product.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async ({\r\n  query = \"\",\r\n  category = \"\",\r\n  parentCategory = \"\",\r\n  subcategory = \"\",\r\n}) => {\r\n  let matchConditions = {};\r\n  if (query) {\r\n    matchConditions.name = { $regex: query, $options: \"i\" };\r\n  }\r\n  if (category) {\r\n    matchConditions.category = category;\r\n  }\r\n  if (parentCategory) {\r\n    matchConditions.parentCategory = parentCategory;\r\n  }\r\n  if (subcategory) {\r\n    matchConditions.subcategory = subcategory;\r\n  }\r\n  const count = await Product.find(matchConditions).countDocuments();\r\n  return count;\r\n}"
  },
  {
    "type": "function",
    "functionName": "requestQuotationService",
    "className": null,
    "parentClassName": null,
    "fileName": "product.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": ["nodemailer"],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (requestData) => {\r\n  const {\r\n    name,\r\n    email,\r\n    phone,\r\n    title,\r\n    price,\r\n    quantity,\r\n    date,\r\n    description,\r\n    tags,\r\n    payment,\r\n    country,\r\n    city,\r\n    uploadedFiles,\r\n  } = requestData;\r\n\r\n  if (\r\n    !name ||\r\n    !email ||\r\n    !phone ||\r\n    !title ||\r\n    !price ||\r\n    !quantity ||\r\n    !date ||\r\n    !description ||\r\n    !tags ||\r\n    !payment ||\r\n    !country ||\r\n    !city\r\n  ) {\r\n    throw new BadRequest(\"Proper details not provided\");\r\n  }\r\n\r\n  const fileLinks =\r\n    uploadedFiles.length > 0\r\n      ? `\r\n      <p><strong>Product files:</strong></p>\r\n      <ul>\r\n        ${uploadedFiles\r\n          .map(\r\n            (file) => `\r\n          <li><a href=\"http://192.168.0.104:3001/${file}\">Download ${file}</a></li>\r\n        `\r\n          )\r\n          .join(\"\")}\r\n      </ul>\r\n    `\r\n      : \"\";\r\n\r\n  const transporter = nodemailer.createTransport({\r\n    host: process.env.SMTP_HOST,\r\n    port: process.env.SMTP_PORT,\r\n    service: process.env.SMTP_SERVICE,\r\n    auth: {\r\n      user: process.env.SMTP_MAIL,\r\n      pass: process.env.SMTP_PASS,\r\n    },\r\n  });\r\n\r\n  const mailOptions = {\r\n    from: process.env.SMTP_MAIL,\r\n    replyTo: requestData.email,\r\n    to: process.env.SMTP_MAIL,\r\n    subject: \"Request for Quotation\",\r\n    html: `\r\n      <h1>New Message from ${name}</h1>\r\n      <p><strong>Email:</strong> ${email}</p>\r\n      <p><strong>Phone:</strong> ${phone}</p>\r\n      <p><strong>Product files:</strong></p>\r\n      ${fileLinks}\r\n      <p><strong>Product title:</strong> ${title}</p>\r\n      <p><strong>Product description:</strong> ${description}</p>\r\n      <p><strong>Product tags:</strong> ${tags}</p>\r\n      <p><strong>Product quantity:</strong> ${quantity}</p>\r\n      <p><strong>Product price:</strong> ${price}</p>\r\n      <p><strong>Expected delivery date:</strong> ${date}</p>\r\n      <p><strong>Payment method:</strong> ${payment}</p>\r\n      <p><strong>Country:</strong> ${country}</p>\r\n      <p><strong>City:</strong> ${city}</p>\r\n    `,\r\n  };\r\n\r\n  await transporter.sendMail(mailOptions);\r\n  return true;\r\n}"
  },
  {
    "type": "imports",
    "fileName": "roi.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "includingClasses": [],
    "includingFunctions": ["createRoi", "updateRoi", "getAllRoi"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "roi.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createRoi",
    "className": null,
    "parentClassName": null,
    "fileName": "roi.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (data) => {\r\n  const roi = await Roi.create({ roi: data.roi / 100 });\r\n  return roi;\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateRoi",
    "className": null,
    "parentClassName": null,
    "fileName": "roi.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (id, data) => {\r\n  const roi = await Roi.findById(id);\r\n  if (!roi) {\r\n    throw new Error(\"Roi not found\");\r\n  }\r\n\r\n  roi.roi = data.roi;\r\n  await roi.save();\r\n  return roi;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllRoi",
    "className": null,
    "parentClassName": null,
    "fileName": "roi.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async () => {\r\n  const rois = await Roi.find({}).sort({ createdAt: -1 });\r\n  return rois;\r\n}"
  },
  {
    "type": "imports",
    "fileName": "user.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "includingClasses": [],
    "includingFunctions": ["loginUser", "sendMailService"],
    "actualCode": "nodemailer <- nodemailer (nodemailer)"
  },
  {
    "type": "globals",
    "fileName": "user.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "loginUser",
    "className": null,
    "parentClassName": null,
    "fileName": "user.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-backend/src/utils/index.js",
        "topmostsourcing-frontend/src/utils/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req) => {\r\n  const { username, password } = req.body;\r\n  if (!username || !password) {\r\n    throw new BadRequest(\"Please provide credentials\");\r\n  }\r\n  const userExist = await User.findOne({\r\n    $or: [{ username }, { email: username }],\r\n  });\r\n  if (!userExist) {\r\n    throw new NotFound(\"Invalid username or email\");\r\n  }\r\n  const passwordMatched = await userExist.comparePassword(password);\r\n  if (!passwordMatched) {\r\n    throw new BadRequest(\"Invalid password\");\r\n  }\r\n  const tokenUser = createTokenUser(userExist);\r\n  return tokenUser;\r\n}"
  },
  {
    "type": "function",
    "functionName": "sendMailService",
    "className": null,
    "parentClassName": null,
    "fileName": "user.service.js",
    "folderName": "topmostsourcing-backend/src/services",
    "upstreamDependencies": {
      "imports": ["nodemailer"],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async ({ name, email, phone, subject, mailText }) => {\r\n  const transporter = nodemailer.createTransport({\r\n    host: process.env.SMTP_HOST,\r\n    port: process.env.SMTP_PORT,\r\n    service: process.env.SMTP_SERVICE,\r\n    auth: {\r\n      user: process.env.SMTP_MAIL,\r\n      pass: process.env.SMTP_PASS,\r\n    },\r\n  });\r\n  const mailOptions = {\r\n    from: email,\r\n    to: process.env.SMTP_MAIL,\r\n    subject: subject,\r\n    html: `\r\n      <h1>New Message from ${name}</h1>\r\n      <p><strong>Name:</strong> ${name}</p>\r\n      <p><strong>Email:</strong> ${email}</p>\r\n      <p><strong>Phone:</strong> ${phone}</p>\r\n      <p><strong>Message:</strong></p>\r\n      <p>${mailText}</p>\r\n    `,\r\n  };\r\n  await transporter.sendMail(mailOptions);\r\n  return true;\r\n}"
  },
  {
    "type": "imports",
    "fileName": "checkPermission.js",
    "folderName": "topmostsourcing-backend/src/utils",
    "includingClasses": [],
    "includingFunctions": ["checkPermission"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "checkPermission.js",
    "folderName": "topmostsourcing-backend/src/utils",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "checkPermission",
    "className": null,
    "parentClassName": null,
    "fileName": "checkPermission.js",
    "folderName": "topmostsourcing-backend/src/utils",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "(requestUser, resourceUserId) => {\r\n  if (requestUser.role === \"ADMIN\") return;\r\n  if (requestUser.userId === resourceUserId.toString()) return;\r\n  throw new UnAuthorized(\"Not authorized to perform this action\");\r\n}"
  },
  {
    "type": "imports",
    "fileName": "createTokenUser.js",
    "folderName": "topmostsourcing-backend/src/utils",
    "includingClasses": [],
    "includingFunctions": ["createTokenUser"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "createTokenUser.js",
    "folderName": "topmostsourcing-backend/src/utils",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createTokenUser",
    "className": null,
    "parentClassName": null,
    "fileName": "createTokenUser.js",
    "folderName": "topmostsourcing-backend/src/utils",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(user) => {\r\n  return { userId: user._id, role: user.role };\r\n}"
  },
  {
    "type": "imports",
    "fileName": "index.js",
    "folderName": "topmostsourcing-backend/src/utils",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "index.js",
    "folderName": "topmostsourcing-backend/src/utils",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "jwt.js",
    "folderName": "topmostsourcing-backend/src/utils",
    "includingClasses": [],
    "includingFunctions": [
      "createToken",
      "isTokenValid",
      "attachCookiesToResponse"
    ],
    "actualCode": "jwt <- jsonwebtoken (jsonwebtoken)"
  },
  {
    "type": "globals",
    "fileName": "jwt.js",
    "folderName": "topmostsourcing-backend/src/utils",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createToken",
    "className": null,
    "parentClassName": null,
    "fileName": "jwt.js",
    "folderName": "topmostsourcing-backend/src/utils",
    "upstreamDependencies": {
      "imports": ["jsonwebtoken"],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(payload) => {\r\n  return jwt.sign(payload, config.jwtSecret, {\r\n    expiresIn: config.jwtExpiry,\r\n  });\r\n}"
  },
  {
    "type": "function",
    "functionName": "isTokenValid",
    "className": null,
    "parentClassName": null,
    "fileName": "jwt.js",
    "folderName": "topmostsourcing-backend/src/utils",
    "upstreamDependencies": {
      "imports": ["jsonwebtoken"],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(token) => {\r\n  return jwt.verify(token, config.jwtSecret);\r\n}"
  },
  {
    "type": "function",
    "functionName": "attachCookiesToResponse",
    "className": null,
    "parentClassName": null,
    "fileName": "jwt.js",
    "folderName": "topmostsourcing-backend/src/utils",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "({ res, user }) => {\r\n  const token = createToken(user);\r\n  res.cookie(\"top_most_outsourcing_token\", token, {\r\n    httpOnly: true,\r\n    sameSite: \"None\",\r\n    secure: true,\r\n    domain: \".topmostsourcing.com\",\r\n    maxAge: 30 * 24 * 60 * 60 * 1000,\r\n  });\r\n}"
  },
  {
    "type": "imports",
    "fileName": "multer.js",
    "folderName": "topmostsourcing-backend/src/utils",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "multer <- multer (multer)\npath <- path (path)"
  },
  {
    "type": "globals",
    "fileName": "multer.js",
    "folderName": "topmostsourcing-backend/src/utils",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "loading.tsx",
    "folderName": "topmostsourcing-frontend/app/community",
    "includingClasses": [],
    "includingFunctions": ["Loading"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "loading.tsx",
    "folderName": "topmostsourcing-frontend/app/community",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "Loading",
    "className": null,
    "parentClassName": null,
    "fileName": "loading.tsx",
    "folderName": "topmostsourcing-frontend/app/community",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/app/community/loading.tsx"]
    },
    "globalVariables": [],
    "actualCode": "function Loading() {\n  return null\n}"
  },
  {
    "type": "imports",
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/community",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "Image <- next/image (next/image)\nLink <- next/link (next/link)"
  },
  {
    "type": "globals",
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/community",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/community/[id]",
    "includingClasses": [],
    "includingFunctions": ["nextSlide", "prevSlide"],
    "actualCode": "Image <- next/image (next/image)\nLink <- next/link (next/link)\nProductDescription <- @/components/product-description (@/components/product-description)"
  },
  {
    "type": "globals",
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/community/[id]",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "nextSlide",
    "className": null,
    "parentClassName": null,
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/community/[id]",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "() => {\n    setCurrentIndex((prev) => Math.min(prev + 1, maxIndex));\n  }"
  },
  {
    "type": "function",
    "functionName": "prevSlide",
    "className": null,
    "parentClassName": null,
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/community/[id]",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "() => {\n    setCurrentIndex((prev) => Math.max(prev - 1, 0));\n  }"
  },
  {
    "type": "imports",
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/design-studio",
    "includingClasses": [],
    "includingFunctions": ["DesignStudioPage"],
    "actualCode": "React <- react (react)\nLink <- next/link (next/link)"
  },
  {
    "type": "globals",
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/design-studio",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "DesignStudioPage",
    "className": null,
    "parentClassName": null,
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/design-studio",
    "upstreamDependencies": {
      "imports": ["react", "next/link"],
      "crossFileImports": [
        "next/link",
        "topmostsourcing-frontend/app/design-studio/page.tsx",
        "topmostsourcing-frontend/components/site-header.tsx",
        "topmostsourcing-frontend/components/ui/input.tsx",
        "topmostsourcing-frontend/components/ui/tabs.tsx",
        "topmostsourcing-frontend/components/product-grid.tsx"
      ]
    },
    "globalVariables": [],
    "actualCode": "function DesignStudioPage() {\n  const [query, setQuery] = useState(\"\");\n  const { data: products } = useQuery(getProductsOption());\n\n  const designProducts = products?.filter(\n    (p: Product) =>\n      p.category?.name?.toLowerCase() === \"design\" &&\n      p.name.toLowerCase().includes(query)\n  );\n  const readyProducts = products?.filter(\n    (p: Product) =>\n      p.category?.name?.toLowerCase() === \"ready stock\" &&\n      p.name.toLowerCase().includes(query)\n  );\n\n  return (\n    <main className=\"min-h-screen bg-white text-black\">\n      <SiteHeader />\n\n      {/* Hero */}\n      <section className=\"px-4 md:px-8 lg:px-12 py-12 md:py-16\">\n        <div className=\"max-w-6xl mx-auto text-center\">\n          <h1 className=\"text-4xl md:text-5xl font-black tracking-tight\">\n            Timeless Apparel,\n            <span className=\"relative\">\n              {\" \"}\n              Modern Craftsmanship\n              <span\n                className=\"absolute -inset-x-2 bottom-1 h-2 -z-10\"\n                style={{ backgroundColor: `${BRAND}99` }}\n              />\n            </span>\n          </h1>\n          <p className=\"mt-4 text-neutral-700 max-w-2xl mx-auto\">\n            Explore quality-made apparel tailored to your needs. Discover\n            garments crafted with care and precision.\n          </p>\n          <div className=\"mt-6 flex items-center justify-center gap-3\">\n            <Link href={\"/rfq\"}>\n              <AnimatedButton variant=\"primary\">\n                Request a Quotation\n              </AnimatedButton>\n            </Link>\n            <AnimatedButton variant=\"outline\" asChild>\n              <Link href=\"#grid\">Browse Collection</Link>\n            </AnimatedButton>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"px-4 md:px-8 lg:px-12\">\n        <BrandRow />\n      </section>\n\n      {/* Grid with tabs */}\n      <section id=\"grid\" className=\"px-4 md:px-8 lg:px-12 py-12 md:py-16\">\n        <div className=\"max-w-6xl mx-auto\">\n          <h2 className=\"text-3xl md:text-4xl font-black tracking-tight\">\n            Crafted for Quality, Made for You\n          </h2>\n          <p className=\"mt-2 text-sm text-neutral-700\">\n            Switch between concept designs and ready stock.\n          </p>\n\n          <div className=\"mt-6 flex items-center gap-3\">\n            <Input\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              placeholder=\"Search products...\"\n              className=\"max-w-xs rounded-none border-[3px]\"\n              style={{ borderColor: INK }}\n            />\n          </div>\n\n          <Tabs defaultValue=\"design\" className=\"mt-6\">\n            <TabsList\n              className=\"grid grid-cols-2 w-full sm:max-w-md rounded-none p-0 border-[3px]\"\n              style={{ borderColor: INK }}\n            >\n              <TabsTrigger\n                value=\"design\"\n                className=\"rounded-none data-[state=active]:text-black data-[state=active]:bg-[var(--brand)]\"\n                style={\n                  {\n                    // @ts-ignore CSS var for inline brand\n                    \"--brand\": BRAND,\n                    borderRight: `3px solid ${INK}`,\n                  } as React.CSSProperties\n                }\n              >\n                Design\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"ready\"\n                className=\"rounded-none data-[state=active]:text-black data-[state=active]:bg-[var(--brand)]\"\n                style={{ \"--brand\": BRAND } as React.CSSProperties}\n              >\n                Ready Stock\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"design\" className=\"mt-6\">\n              <ProductGrid products={designProducts} />\n            </TabsContent>\n            <TabsContent value=\"ready\" className=\"mt-6\">\n              <ProductGrid products={readyProducts} />\n            </TabsContent>\n          </Tabs>\n        </div>\n      </section>\n\n      <SiteFooter />\n    </main>\n  );\n}"
  },
  {
    "type": "imports",
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/investor",
    "includingClasses": [],
    "includingFunctions": [
      "handleLogin",
      "handleSendOTP",
      "handleSignup",
      "calculateROI",
      "handleWithdraw",
      "TermsModal"
    ],
    "actualCode": "React <- react (react)"
  },
  {
    "type": "globals",
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/investor",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "handleLogin",
    "className": null,
    "parentClassName": null,
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/investor",
    "upstreamDependencies": {
      "imports": ["react"],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutate(loginForm);\n  }"
  },
  {
    "type": "function",
    "functionName": "handleSendOTP",
    "className": null,
    "parentClassName": null,
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/investor",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "() => {\n    if (loginForm.phone) {\n      setOtpSent(true);\n      console.log(\"OTP sent to:\", loginForm.phone);\n    }\n  }"
  },
  {
    "type": "function",
    "functionName": "handleSignup",
    "className": null,
    "parentClassName": null,
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/investor",
    "upstreamDependencies": {
      "imports": ["react"],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (e: React.FormEvent) => {\n    e.preventDefault();\n    mutate(signupForm);\n  }"
  },
  {
    "type": "function",
    "functionName": "calculateROI",
    "className": null,
    "parentClassName": null,
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/investor",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "() => {\n    const amount = Number.parseFloat(roiCalculator.amount) || 0;\n    const roi = roiCalculator.roi || 0;\n    const years = Number.parseFloat(roiCalculator.years) || 0;\n    const returns = amount * (roi / 100) * years;\n    return amount + returns;\n  }"
  },
  {
    "type": "function",
    "functionName": "handleWithdraw",
    "className": null,
    "parentClassName": null,
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/investor",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/use-toast.ts",
        "topmostsourcing-frontend/hooks/use-toast.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "() => {\n    if (investor?.withdrawableAmount <= 0) {\n      toast.error(\"Withdraw amount is not sufficient\");\n    } else {\n      withdraw(investorData!._id);\n    }\n  }"
  },
  {
    "type": "function",
    "functionName": "TermsModal",
    "className": null,
    "parentClassName": null,
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/investor",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "() => (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-none border-[3px] border-black shadow-[8px_8px_0_0_#0F0F0F] max-w-4xl max-h-[80vh] overflow-y-auto\">\n        <div className=\"p-8\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-3xl font-black\">Terms & Conditions</h2>\n            <Button\n              onClick={() => setShowTermsModal(false)}\n              className=\"rounded-none border-[2px] border-black p-2\"\n              style={{ backgroundColor: \"white\", color: INK }}\n            >\n              <X className=\"size-5\" />\n            </Button>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-black mb-2\" style={{ color: BRAND }}>\n                  Investment Limits\n                </h3>\n                <p className=\"font-medium\">\n                  Minimum investment: 50,000 BDT, Maximum: 500,000 BDT.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"font-black mb-2\" style={{ color: BRAND }}>\n                  Returns\n                </h3>\n                <p className=\"font-medium\">\n                  16–20% per year, based on the chosen package.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"font-black mb-2\" style={{ color: BRAND }}>\n                  Payment\n                </h3>\n                <p className=\"font-medium\">\n                  ROI paid after 1 year via bank transfer or preferred method.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"font-black mb-2\" style={{ color: BRAND }}>\n                  Risk Disclosure\n                </h3>\n                <p className=\"font-medium\">\n                  All investments carry inherent risks. Past performance does\n                  not guarantee future results.\n                </p>\n              </div>\n            </div>\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-black mb-2\" style={{ color: BRAND }}>\n                  Withdrawal Policy\n                </h3>\n                <p className=\"font-medium\">\n                  No early withdrawal, except with prior approval (may include\n                  deductions).\n                </p>\n              </div>\n              <div>\n                <h3 className=\"font-black mb-2\" style={{ color: BRAND }}>\n                  Legal Compliance\n                </h3>\n                <p className=\"font-medium\">\n                  Investments follow the laws & financial regulations of\n                  Bangladesh.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"font-black mb-2\" style={{ color: BRAND }}>\n                  Account Management\n                </h3>\n                <p className=\"font-medium\">\n                  Investors receive unique IDs and access to online dashboard\n                  for tracking.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"font-black mb-2\" style={{ color: BRAND }}>\n                  Dispute Resolution\n                </h3>\n                <p className=\"font-medium\">\n                  Any disputes will be resolved through arbitration under\n                  Bangladesh law.\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mt-8 p-4 bg-gray-50 rounded-none border-[2px] border-gray-300\">\n            <p className=\"text-sm font-medium text-gray-700\">\n              By creating an investor account, you acknowledge that you have\n              read, understood, and agree to be bound by these Terms &\n              Conditions. For questions or clarifications, contact us at\n              info@topmostsourcing.com\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )"
  },
  {
    "type": "imports",
    "fileName": "layout.tsx",
    "folderName": "topmostsourcing-frontend/app",
    "includingClasses": [],
    "includingFunctions": ["RootLayout"],
    "actualCode": "QueryProvider <- @/providers/query-provider (@/providers/query-provider)"
  },
  {
    "type": "globals",
    "fileName": "layout.tsx",
    "folderName": "topmostsourcing-frontend/app",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "RootLayout",
    "className": null,
    "parentClassName": null,
    "fileName": "layout.tsx",
    "folderName": "topmostsourcing-frontend/app",
    "upstreamDependencies": {
      "imports": ["@/providers/query-provider"],
      "crossFileImports": [
        "@/providers/query-provider",
        "topmostsourcing-frontend/app/layout.tsx",
        "topmostsourcing-frontend/providers/query-provider.tsx"
      ]
    },
    "globalVariables": [],
    "actualCode": "function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <style>{`\nhtml {\n  font-family: ${GeistSans.style.fontFamily};\n  --font-sans: ${GeistSans.variable};\n  --font-mono: ${GeistMono.variable};\n}\n        `}</style>\n      </head>\n      <body>\n        <QueryProvider>{children}</QueryProvider>\n        <Toaster />\n      </body>\n    </html>\n  );\n}"
  },
  {
    "type": "imports",
    "fileName": "not-found.tsx",
    "folderName": "topmostsourcing-frontend/app",
    "includingClasses": [],
    "includingFunctions": ["NotFound"],
    "actualCode": "Link <- next/link (next/link)"
  },
  {
    "type": "globals",
    "fileName": "not-found.tsx",
    "folderName": "topmostsourcing-frontend/app",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "NotFound",
    "className": null,
    "parentClassName": null,
    "fileName": "not-found.tsx",
    "folderName": "topmostsourcing-frontend/app",
    "upstreamDependencies": {
      "imports": ["next/link"],
      "crossFileImports": [
        "next/link",
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "function NotFound() {\n  return (\n    <div className=\"min-h-[60vh] grid place-content-center text-center gap-3 p-8\">\n      <h1 className=\"text-3xl font-bold\">Product not found</h1>\n      <p className=\"text-muted-foreground\">The item you are looking for doesn&apos;t exist or was moved.</p>\n      <Button asChild variant=\"outline\">\n        <Link href=\"/design-studio\">Back to Design Studio</Link>\n      </Button>\n    </div>\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "Link <- next/link (next/link)\nImage <- next/image (next/image)\nProductSlideShow <- @/components/product-slide-show (@/components/product-slide-show)"
  },
  {
    "type": "globals",
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/products/[id]",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "Image <- next/image (next/image)\nLink <- next/link (next/link)\nProductDescription <- @/components/product-description (@/components/product-description)"
  },
  {
    "type": "globals",
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/products/[id]",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/rfq",
    "includingClasses": [],
    "includingFunctions": ["handleDrag", "handleDrop"],
    "actualCode": "React <- react (react)"
  },
  {
    "type": "globals",
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/rfq",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "handleDrag",
    "className": null,
    "parentClassName": null,
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/rfq",
    "upstreamDependencies": {
      "imports": ["react"],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(e: React.DragEvent) => {\n    e.preventDefault()\n    e.stopPropagation()\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true)\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false)\n    }\n  }"
  },
  {
    "type": "function",
    "functionName": "handleDrop",
    "className": null,
    "parentClassName": null,
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/rfq",
    "upstreamDependencies": {
      "imports": ["react"],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(e: React.DragEvent) => {\n    e.preventDefault()\n    e.stopPropagation()\n    setDragActive(false)\n    // Handle file drop logic here\n  }"
  },
  {
    "type": "imports",
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/why-us",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "Image <- next/image (next/image)"
  },
  {
    "type": "globals",
    "fileName": "page.tsx",
    "folderName": "topmostsourcing-frontend/app/why-us",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "about-section.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "Image <- next/image (next/image)"
  },
  {
    "type": "globals",
    "fileName": "about-section.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "animated-button.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "React <- react (react)"
  },
  {
    "type": "globals",
    "fileName": "animated-button.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "brand-row.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "brand-row.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "floating-elements.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "includingClasses": [],
    "includingFunctions": ["handleMouseMove"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "floating-elements.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "handleMouseMove",
    "className": null,
    "parentClassName": null,
    "fileName": "floating-elements.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(e: MouseEvent) => {\n      setMousePos({ x: e.clientX, y: e.clientY })\n    }"
  },
  {
    "type": "imports",
    "fileName": "inspiration-strip.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "includingClasses": [],
    "includingFunctions": ["InspirationStrip"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "inspiration-strip.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "InspirationStrip",
    "className": null,
    "parentClassName": null,
    "fileName": "inspiration-strip.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/inspiration-strip.tsx"
      ]
    },
    "globalVariables": [],
    "actualCode": "function InspirationStrip() {\n  // These images are included as references; they are not shown by default in the UI.\n  // If you want to surface them on a page, import this component and render it.\n  return (\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n      <img\n        src=\"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Desktop%20-%201-bpcpeGLRWbWpby18bC1qswghMT1MHM.png\"\n        alt=\"Homepage inspiration\"\n        className=\"rounded-lg border\"\n      />\n      <img\n        src=\"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Design%20Studio-FTdtslcZc5KibTFIBLQUTl4XMOv3Ox.png\"\n        alt=\"Design Studio inspiration\"\n        className=\"rounded-lg border\"\n      />\n      <img\n        src=\"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Why%20Us-nTnfbBpPP7rPPJhHua4wxvGG1I7kzT.png\"\n        alt=\"Why Us inspiration\"\n        className=\"rounded-lg border\"\n      />\n      <img\n        src=\"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Product%20Details-QEq2HG0kkU1bXZwn5rX4DqEBRVasZP.png\"\n        alt=\"Product Details inspiration\"\n        className=\"rounded-lg border\"\n      />\n    </div>\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "marquee-strip.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "includingClasses": [],
    "includingFunctions": ["MarqueeStrip"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "marquee-strip.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "MarqueeStrip",
    "className": null,
    "parentClassName": null,
    "fileName": "marquee-strip.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/marquee-strip.tsx"
      ]
    },
    "globalVariables": [],
    "actualCode": "function MarqueeStrip({ items, brandColor = \"#06E84E\", ink = \"#0F0F0F\", speedMs = 15000 }: Props) {\n  const content = items.join(\"   ★   \")\n  return (\n    <div\n      className=\"overflow-hidden border-y-[3px] py-2 select-none\"\n      style={{ backgroundColor: `${brandColor}33`, borderColor: ink, color: ink }}\n      aria-label=\"Scrolling highlights\"\n    >\n      <div className=\"whitespace-nowrap font-black uppercase tracking-wider text-sm will-change-transform marquee\">\n        {content} {content}\n      </div>\n\n      <style jsx>{`\n        .marquee {\n          animation: m ${speedMs}ms linear infinite;\n        }\n        @keyframes m {\n          0% {\n            transform: translateX(0);\n          }\n          100% {\n            transform: translateX(-50%);\n          }\n        }\n      `}</style>\n    </div>\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "product-card.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "Link <- next/link (next/link)\nImage <- next/image (next/image)"
  },
  {
    "type": "globals",
    "fileName": "product-card.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "product-description.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "includingClasses": [],
    "includingFunctions": ["ProductDescription"],
    "actualCode": "dynamic <- next/dynamic (next/dynamic)\nReact <- react (react)"
  },
  {
    "type": "globals",
    "fileName": "product-description.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "ProductDescription",
    "className": null,
    "parentClassName": null,
    "fileName": "product-description.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "({ desc }: { desc: string }) => {\r\n  return (\r\n    <ReactQuill\r\n      theme=\"bubble\"\r\n      value={desc}\r\n     \r\n      className=\"mt-3 text-neutral-700\"\r\n    />\r\n  );\r\n}"
  },
  {
    "type": "imports",
    "fileName": "product-grid.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "includingClasses": [],
    "includingFunctions": ["ProductGrid"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "product-grid.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "ProductGrid",
    "className": null,
    "parentClassName": null,
    "fileName": "product-grid.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/product-grid.tsx"
      ]
    },
    "globalVariables": [],
    "actualCode": "function ProductGrid({ products = [] }: Props) {\n  return (\n    <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n      {products?.length > 0 &&\n        products?.map((p) => <ProductCard key={p._id} product={p} />)}\n    </div>\n  );\n}"
  },
  {
    "type": "imports",
    "fileName": "product-slide-show.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "Image <- next/image (next/image)\nLink <- next/link (next/link)"
  },
  {
    "type": "globals",
    "fileName": "product-slide-show.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "section-title.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "section-title.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "site-footer.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "Link <- next/link (next/link)"
  },
  {
    "type": "globals",
    "fileName": "site-footer.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "site-header.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "includingClasses": [],
    "includingFunctions": ["SiteHeader"],
    "actualCode": "Link <- next/link (next/link)"
  },
  {
    "type": "globals",
    "fileName": "site-header.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "SiteHeader",
    "className": null,
    "parentClassName": null,
    "fileName": "site-header.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "upstreamDependencies": {
      "imports": ["next/link"],
      "crossFileImports": [
        "next/link",
        "topmostsourcing-frontend/components/site-header.tsx"
      ]
    },
    "globalVariables": [],
    "actualCode": "function SiteHeader() {\n  const [isOpen, setIsOpen] = useState(false);\n  const pathname = usePathname();\n\n  useEffect(() => {\n    setIsOpen(false);\n  }, [pathname]);\n\n  useEffect(() => {\n    if (isOpen) {\n      document.body.style.height = \"100vh\";\n      document.body.style.overflow = \"hidden\";\n    } else {\n      document.body.style.overflow = \"\";\n    }\n\n    return () => {\n      document.body.style.overflow = \"\";\n    };\n  }, [isOpen]);\n\n  return (\n    <>\n      <header className=\"sticky top-0 z-40 bg-white/90 backdrop-blur border-b-0\">\n        <div\n          className=\"max-w-6xl mx-auto px-4 md:px-8 lg:px-12 h-16 flex items-center justify-between rounded-none border-b-[3px]\"\n          style={{ borderColor: INK }}\n        >\n          <Link\n            href=\"/\"\n            className=\"font-black tracking-tight leading-5 sm:text-lg flex items-center justify-start -space-x-3 -ml-4\"\n          >\n            <img src={\"/logo.png\"} alt=\"logo\" className=\"h-20\" />\n            <p>TOPMOST SOURCING LTD</p>\n          </Link>\n          <nav className=\"hidden md:flex items-center gap-6 text-sm font-bold uppercase\">\n            <Link href=\"/\" className=\"hover:underline underline-offset-4\">\n              Home\n            </Link>\n            <Link\n              href=\"/design-studio\"\n              className=\"hover:underline underline-offset-4\"\n            >\n              Design Studio\n            </Link>\n            <Link\n              href=\"/community\"\n              className=\"hover:underline underline-offset-4\"\n            >\n              Community\n            </Link>\n            <Link href=\"/rfq\" className=\"hover:underline underline-offset-4\">\n              RFQ\n            </Link>\n            <Link href=\"/why-us\" className=\"hover:underline underline-offset-4\">\n              Why Us\n            </Link>\n            <Link\n              href=\"/investor\"\n              className=\"hover:underline underline-offset-4\"\n            >\n              Investor\n            </Link>\n          </nav>\n          <Button\n            asChild\n            size=\"sm\"\n            className=\"max-sm:hidden rounded-none border-[3px] font-bold transition-all duration-300 hover:scale-105 hover:-translate-y-1\"\n            style={{\n              backgroundColor: BRAND,\n              color: INK,\n              borderColor: INK,\n              boxShadow: `4px 4px 0 0 ${INK}`,\n            }}\n            onMouseEnter={(e) => {\n              e.currentTarget.style.boxShadow = `6px 6px 0 0 ${INK}`;\n            }}\n            onMouseLeave={(e) => {\n              e.currentTarget.style.boxShadow = `4px 4px 0 0 ${INK}`;\n            }}\n          >\n            <a\n              href=\"https://wa.me/+8801912563709\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <MessageCircle className=\"size-4 mr-2\" />\n              WhatsApp Us\n            </a>\n          </Button>\n          <Menu className=\"sm:hidden\" onClick={() => setIsOpen(true)} />\n        </div>\n      </header>\n      <div\n        className={`bg-black/70 fixed inset-0 h-screen z-[99] transition-all duration-300 ${\n          isOpen ? \"translate-x-0\" : \"-translate-x-full\"\n        }`}\n      >\n        <nav\n          className={`relative bg-white w-full h-full p-6 pt-14 flex flex-col items-start gap-6 text-lg font-bold uppercase`}\n        >\n          <X\n            className=\"absolute top-3 right-3\"\n            onClick={() => setIsOpen(false)}\n          />\n          {/* <Link\n              href=\"/\"\n              className=\"font-black tracking-tight leading-5 sm:text-lg flex items-center justify-start -space-x-3 -ml-4\"\n            >\n              <img src={\"/logo.png\"} alt=\"logo\" className=\"h-20\" />\n              <p>TOPMOST SOURCING LTD</p>\n            </Link> */}\n          <Link href=\"/\" className=\"hover:underline underline-offset-4\">\n            Home\n          </Link>\n          <Link\n            href=\"/design-studio\"\n            className=\"hover:underline underline-offset-4\"\n          >\n            Design Studio\n          </Link>\n          <Link\n            href=\"/community\"\n            className=\"hover:underline underline-offset-4\"\n          >\n            Community\n          </Link>\n          <Link href=\"/rfq\" className=\"hover:underline underline-offset-4\">\n            RFQ\n          </Link>\n          <Link href=\"/why-us\" className=\"hover:underline underline-offset-4\">\n            Why Us\n          </Link>\n          <Link href=\"/investor\" className=\"hover:underline underline-offset-4\">\n            Investor\n          </Link>\n          <Button\n            asChild\n            size=\"sm\"\n            className=\"sm:hidden rounded-none border-[3px] font-bold transition-all duration-300 hover:scale-105 hover:-translate-y-1 mt-auto\"\n            style={{\n              backgroundColor: BRAND,\n              color: INK,\n              borderColor: INK,\n              boxShadow: `4px 4px 0 0 ${INK}`,\n            }}\n            onMouseEnter={(e) => {\n              e.currentTarget.style.boxShadow = `6px 6px 0 0 ${INK}`;\n            }}\n            onMouseLeave={(e) => {\n              e.currentTarget.style.boxShadow = `4px 4px 0 0 ${INK}`;\n            }}\n          >\n            <a\n              href=\"https://wa.me/+8801912563709\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <MessageCircle className=\"size-4 mr-2\" />\n              WhatsApp Us\n            </a>\n          </Button>\n        </nav>\n      </div>\n    </>\n  );\n}"
  },
  {
    "type": "imports",
    "fileName": "testimonials.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "testimonials.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "theme-provider.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "includingClasses": [],
    "includingFunctions": ["ThemeProvider"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "theme-provider.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "ThemeProvider",
    "className": null,
    "parentClassName": null,
    "fileName": "theme-provider.tsx",
    "folderName": "topmostsourcing-frontend/components",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/theme-provider.tsx"
      ]
    },
    "globalVariables": [],
    "actualCode": "function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}"
  },
  {
    "type": "imports",
    "fileName": "accordion.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["Accordion", "AccordionItem", "AccordionTrigger"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "accordion.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "Accordion",
    "className": null,
    "parentClassName": null,
    "fileName": "accordion.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "function Accordion({\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Root>) {\n  return <AccordionPrimitive.Root data-slot=\"accordion\" {...props} />\n}"
  },
  {
    "type": "function",
    "functionName": "AccordionItem",
    "className": null,
    "parentClassName": null,
    "fileName": "accordion.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/lib/utils.ts"]
    },
    "globalVariables": [],
    "actualCode": "function AccordionItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Item>) {\n  return (\n    <AccordionPrimitive.Item\n      data-slot=\"accordion-item\"\n      className={cn(\"border-b last:border-b-0\", className)}\n      {...props}\n    />\n  )\n}"
  },
  {
    "type": "function",
    "functionName": "AccordionTrigger",
    "className": null,
    "parentClassName": null,
    "fileName": "accordion.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/lib/utils.ts"]
    },
    "globalVariables": [],
    "actualCode": "function AccordionTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        data-slot=\"accordion-trigger\"\n        className={cn(\n          \"focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200\" />\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "alert-dialog.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["AlertDialog", "AlertDialogDescription"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "alert-dialog.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "AlertDialog",
    "className": null,
    "parentClassName": null,
    "fileName": "alert-dialog.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "function AlertDialog({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {\n  return <AlertDialogPrimitive.Root data-slot=\"alert-dialog\" {...props} />\n}"
  },
  {
    "type": "function",
    "functionName": "AlertDialogDescription",
    "className": null,
    "parentClassName": null,
    "fileName": "alert-dialog.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/lib/utils.ts"]
    },
    "globalVariables": [],
    "actualCode": "function AlertDialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {\n  return (\n    <AlertDialogPrimitive.Description\n      data-slot=\"alert-dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "alert.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "alert.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "aspect-ratio.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["AspectRatio"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "aspect-ratio.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "AspectRatio",
    "className": null,
    "parentClassName": null,
    "fileName": "aspect-ratio.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/aspect-ratio.tsx"
      ]
    },
    "globalVariables": [],
    "actualCode": "function AspectRatio({\n  ...props\n}: React.ComponentProps<typeof AspectRatioPrimitive.Root>) {\n  return <AspectRatioPrimitive.Root data-slot=\"aspect-ratio\" {...props} />\n}"
  },
  {
    "type": "imports",
    "fileName": "avatar.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "avatar.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "badge.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["Badge"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "badge.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "Badge",
    "className": null,
    "parentClassName": null,
    "fileName": "badge.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/lib/utils.ts"]
    },
    "globalVariables": [],
    "actualCode": "function Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }"
  },
  {
    "type": "imports",
    "fileName": "breadcrumb.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["Breadcrumb"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "breadcrumb.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "Breadcrumb",
    "className": null,
    "parentClassName": null,
    "fileName": "breadcrumb.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "function Breadcrumb({ ...props }: React.ComponentProps<\"nav\">) {\n  return <nav aria-label=\"breadcrumb\" data-slot=\"breadcrumb\" {...props} />\n}"
  },
  {
    "type": "imports",
    "fileName": "button.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "button.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "calendar.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "calendar.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "card.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "card.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "carousel.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["useCarousel", "Carousel", "CarouselNext"],
    "actualCode": "useEmblaCarousel <- embla-carousel-react (embla-carousel-react)"
  },
  {
    "type": "globals",
    "fileName": "carousel.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "useCarousel",
    "className": null,
    "parentClassName": null,
    "fileName": "carousel.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/carousel.tsx"
      ]
    },
    "globalVariables": [],
    "actualCode": "function useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}"
  },
  {
    "type": "function",
    "functionName": "Carousel",
    "className": null,
    "parentClassName": null,
    "fileName": "carousel.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": ["embla-carousel-react"],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/carousel.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function Carousel({\n  orientation = \"horizontal\",\n  opts,\n  setApi,\n  plugins,\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & CarouselProps) {\n  const [carouselRef, api] = useEmblaCarousel(\n    {\n      ...opts,\n      axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n    },\n    plugins\n  )\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n  const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) return\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev()\n  }, [api])\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext()\n  }, [api])\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === \"ArrowLeft\") {\n        event.preventDefault()\n        scrollPrev()\n      } else if (event.key === \"ArrowRight\") {\n        event.preventDefault()\n        scrollNext()\n      }\n    },\n    [scrollPrev, scrollNext]\n  )\n\n  React.useEffect(() => {\n    if (!api || !setApi) return\n    setApi(api)\n  }, [api, setApi])\n\n  React.useEffect(() => {\n    if (!api) return\n    onSelect(api)\n    api.on(\"reInit\", onSelect)\n    api.on(\"select\", onSelect)\n\n    return () => {\n      api?.off(\"select\", onSelect)\n    }\n  }, [api, onSelect])\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api: api,\n        opts,\n        orientation:\n          orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext,\n      }}\n    >\n      <div\n        onKeyDownCapture={handleKeyDown}\n        className={cn(\"relative\", className)}"
  },
  {
    "type": "function",
    "functionName": "CarouselNext",
    "className": null,
    "parentClassName": null,
    "fileName": "carousel.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/carousel.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function CarouselNext({\n  className,\n  variant = \"outline\",\n  size = \"icon\",\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-next\"\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute size-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"top-1/2 -right-12 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "chart.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["useChart"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "chart.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "useChart",
    "className": null,
    "parentClassName": null,
    "fileName": "chart.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "function useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}"
  },
  {
    "type": "imports",
    "fileName": "checkbox.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["Checkbox"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "checkbox.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "Checkbox",
    "className": null,
    "parentClassName": null,
    "fileName": "checkbox.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/checkbox.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function Checkbox({\n  className,\n  ...props\n}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {\n  return (\n    <CheckboxPrimitive.Root\n      data-slot=\"checkbox\"\n      className={cn(\n        \"peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <CheckboxPrimitive.Indicator\n        data-slot=\"checkbox-indicator\"\n        className=\"flex items-center justify-center text-current transition-none\"\n      >\n        <CheckIcon className=\"size-3.5\" />\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "collapsible.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["Collapsible", "CollapsibleTrigger"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "collapsible.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "Collapsible",
    "className": null,
    "parentClassName": null,
    "fileName": "collapsible.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/collapsible.tsx"
      ]
    },
    "globalVariables": [],
    "actualCode": "function Collapsible({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {\n  return <CollapsiblePrimitive.Root data-slot=\"collapsible\" {...props} />\n}"
  },
  {
    "type": "function",
    "functionName": "CollapsibleTrigger",
    "className": null,
    "parentClassName": null,
    "fileName": "collapsible.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/collapsible.tsx"
      ]
    },
    "globalVariables": [],
    "actualCode": "function CollapsibleTrigger({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleTrigger\n      data-slot=\"collapsible-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction CollapsibleContent({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleContent\n      data-slot=\"collapsible-content\"\n      {...props}\n    />\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "command.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "command.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "context-menu.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [
      "ContextMenu",
      "ContextMenuRadioGroup",
      "ContextMenuRadioItem"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "context-menu.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "ContextMenu",
    "className": null,
    "parentClassName": null,
    "fileName": "context-menu.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "function ContextMenu({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Root>) {\n  return <ContextMenuPrimitive.Root data-slot=\"context-menu\" {...props} />\n}"
  },
  {
    "type": "function",
    "functionName": "ContextMenuRadioGroup",
    "className": null,
    "parentClassName": null,
    "fileName": "context-menu.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/radio-group.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function ContextMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.RadioGroup>) {\n  return (\n    <ContextMenuPrimitive.RadioGroup\n      data-slot=\"context-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <ContextMenuPrimitive.SubTrigger\n      data-slot=\"context-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto\" />\n    </ContextMenuPrimitive.SubTrigger>\n  )\n}"
  },
  {
    "type": "function",
    "functionName": "ContextMenuRadioItem",
    "className": null,
    "parentClassName": null,
    "fileName": "context-menu.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/lib/utils.ts"]
    },
    "globalVariables": [],
    "actualCode": "function ContextMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.RadioItem>) {\n  return (\n    <ContextMenuPrimitive.RadioItem\n      data-slot=\"context-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </ContextMenuPrimitive.RadioItem>\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "dialog.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [
      "Dialog",
      "DialogTrigger",
      "DialogPortal",
      "DialogClose",
      "DialogDescription"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "dialog.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "Dialog",
    "className": null,
    "parentClassName": null,
    "fileName": "dialog.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/components/ui/dialog.tsx"]
    },
    "globalVariables": [],
    "actualCode": "function Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}"
  },
  {
    "type": "function",
    "functionName": "DialogTrigger",
    "className": null,
    "parentClassName": null,
    "fileName": "dialog.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/components/ui/dialog.tsx"]
    },
    "globalVariables": [],
    "actualCode": "function DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}"
  },
  {
    "type": "function",
    "functionName": "DialogPortal",
    "className": null,
    "parentClassName": null,
    "fileName": "dialog.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/components/ui/dialog.tsx"]
    },
    "globalVariables": [],
    "actualCode": "function DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}"
  },
  {
    "type": "function",
    "functionName": "DialogClose",
    "className": null,
    "parentClassName": null,
    "fileName": "dialog.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/components/ui/dialog.tsx"]
    },
    "globalVariables": [],
    "actualCode": "function DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}"
  },
  {
    "type": "function",
    "functionName": "DialogDescription",
    "className": null,
    "parentClassName": null,
    "fileName": "dialog.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/dialog.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "drawer.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [
      "Drawer",
      "DrawerTrigger",
      "DrawerPortal",
      "DrawerClose",
      "DrawerOverlay"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "drawer.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "Drawer",
    "className": null,
    "parentClassName": null,
    "fileName": "drawer.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/components/ui/drawer.tsx"]
    },
    "globalVariables": [],
    "actualCode": "function Drawer({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) {\n  return <DrawerPrimitive.Root data-slot=\"drawer\" {...props} />\n}"
  },
  {
    "type": "function",
    "functionName": "DrawerTrigger",
    "className": null,
    "parentClassName": null,
    "fileName": "drawer.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/components/ui/drawer.tsx"]
    },
    "globalVariables": [],
    "actualCode": "function DrawerTrigger({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {\n  return <DrawerPrimitive.Trigger data-slot=\"drawer-trigger\" {...props} />\n}"
  },
  {
    "type": "function",
    "functionName": "DrawerPortal",
    "className": null,
    "parentClassName": null,
    "fileName": "drawer.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/components/ui/drawer.tsx"]
    },
    "globalVariables": [],
    "actualCode": "function DrawerPortal({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {\n  return <DrawerPrimitive.Portal data-slot=\"drawer-portal\" {...props} />\n}"
  },
  {
    "type": "function",
    "functionName": "DrawerClose",
    "className": null,
    "parentClassName": null,
    "fileName": "drawer.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/components/ui/drawer.tsx"]
    },
    "globalVariables": [],
    "actualCode": "function DrawerClose({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Close>) {\n  return <DrawerPrimitive.Close data-slot=\"drawer-close\" {...props} />\n}"
  },
  {
    "type": "function",
    "functionName": "DrawerOverlay",
    "className": null,
    "parentClassName": null,
    "fileName": "drawer.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/drawer.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function DrawerOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {\n  return (\n    <DrawerPrimitive.Overlay\n      data-slot=\"drawer-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Content>) {\n  return (\n    <DrawerPortal data-slot=\"drawer-portal\">\n      <DrawerOverlay />\n      <DrawerPrimitive.Content\n        data-slot=\"drawer-content\"\n        className={cn(\n          \"group/drawer-content bg-background fixed z-50 flex h-auto flex-col\",\n          \"data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b\",\n          \"data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t\",\n          \"data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l data-[vaul-drawer-direction=right]:sm:max-w-sm\",\n          \"data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r data-[vaul-drawer-direction=left]:sm:max-w-sm\",\n          className\n        )}\n        {...props}\n      >\n        <div className=\"bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block\" />\n        {children}\n      </DrawerPrimitive.Content>\n    </DrawerPortal>\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "dropdown-menu.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["DropdownMenu"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "dropdown-menu.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "DropdownMenu",
    "className": null,
    "parentClassName": null,
    "fileName": "dropdown-menu.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "function DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}"
  },
  {
    "type": "imports",
    "fileName": "form.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [
      "FormField",
      "useFormField",
      "FormControl",
      "FormDescription"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "form.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "FormField",
    "className": null,
    "parentClassName": null,
    "fileName": "form.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}"
  },
  {
    "type": "function",
    "functionName": "useFormField",
    "className": null,
    "parentClassName": null,
    "fileName": "form.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "() => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState } = useFormContext()\n  const formState = useFormState({ name: fieldContext.name })\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}"
  },
  {
    "type": "function",
    "functionName": "FormControl",
    "className": null,
    "parentClassName": null,
    "fileName": "form.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n}"
  },
  {
    "type": "function",
    "functionName": "FormDescription",
    "className": null,
    "parentClassName": null,
    "fileName": "form.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/lib/utils.ts"]
    },
    "globalVariables": [],
    "actualCode": "function FormDescription({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : props.children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn(\"text-destructive text-sm\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n}\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}"
  },
  {
    "type": "imports",
    "fileName": "hover-card.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["HoverCard"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "hover-card.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "HoverCard",
    "className": null,
    "parentClassName": null,
    "fileName": "hover-card.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "function HoverCard({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Root>) {\n  return <HoverCardPrimitive.Root data-slot=\"hover-card\" {...props} />\n}"
  },
  {
    "type": "imports",
    "fileName": "input-otp.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["InputOTP"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "input-otp.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "InputOTP",
    "className": null,
    "parentClassName": null,
    "fileName": "input-otp.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/lib/utils.ts"]
    },
    "globalVariables": [],
    "actualCode": "function InputOTP({\n  className,\n  containerClassName,\n  ...props\n}: React.ComponentProps<typeof OTPInput> & {\n  containerClassName?: string\n}) {\n  return (\n    <OTPInput\n      data-slot=\"input-otp\"\n      containerClassName={cn(\n        \"flex items-center gap-2 has-disabled:opacity-50\",\n        containerClassName\n      )}\n      className={cn(\"disabled:cursor-not-allowed\", className)}\n      {...props}\n    />\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "input.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["Input"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "input.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "Input",
    "className": null,
    "parentClassName": null,
    "fileName": "input.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/input.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "label.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["Label"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "label.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "Label",
    "className": null,
    "parentClassName": null,
    "fileName": "label.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/label.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "menubar.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [
      "MenubarPortal",
      "MenubarRadioItem",
      "MenubarSubContent"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "menubar.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "MenubarPortal",
    "className": null,
    "parentClassName": null,
    "fileName": "menubar.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/components/ui/menubar.tsx"]
    },
    "globalVariables": [],
    "actualCode": "function MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal data-slot=\"menubar-portal\" {...props} />\n}"
  },
  {
    "type": "function",
    "functionName": "MenubarRadioItem",
    "className": null,
    "parentClassName": null,
    "fileName": "menubar.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/menubar.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function MenubarRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioItem>) {\n  return (\n    <MenubarPrimitive.RadioItem\n      data-slot=\"menubar-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <MenubarPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </MenubarPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </MenubarPrimitive.RadioItem>\n  )\n}"
  },
  {
    "type": "function",
    "functionName": "MenubarSubContent",
    "className": null,
    "parentClassName": null,
    "fileName": "menubar.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/menubar.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function MenubarSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.SubContent>) {\n  return (\n    <MenubarPrimitive.SubContent\n      data-slot=\"menubar-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "navigation-menu.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["NavigationMenuTrigger", "NavigationMenuContent"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "navigation-menu.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "NavigationMenuTrigger",
    "className": null,
    "parentClassName": null,
    "fileName": "navigation-menu.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/navigation-menu.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function NavigationMenuTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {\n  return (\n    <NavigationMenuPrimitive.Trigger\n      data-slot=\"navigation-menu-trigger\"\n      className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n      {...props}\n    >\n      {children}{\" \"}\n      <ChevronDownIcon\n        className=\"relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180\"\n        aria-hidden=\"true\"\n      />\n    </NavigationMenuPrimitive.Trigger>\n  )\n}"
  },
  {
    "type": "function",
    "functionName": "NavigationMenuContent",
    "className": null,
    "parentClassName": null,
    "fileName": "navigation-menu.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/navigation-menu.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function NavigationMenuContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {\n  return (\n    <NavigationMenuPrimitive.Content\n      data-slot=\"navigation-menu-content\"\n      className={cn(\n        \"data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto\",\n        \"group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none\",\n        className\n      )}\n      {...props}\n    />\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "pagination.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["PaginationNext", "PaginationEllipsis"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "pagination.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "PaginationNext",
    "className": null,
    "parentClassName": null,
    "fileName": "pagination.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/pagination.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function PaginationNext({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      aria-label=\"Go to next page\"\n      size=\"default\"\n      className={cn(\"gap-1 px-2.5 sm:pr-2.5\", className)}\n      {...props}\n    >\n      <span className=\"hidden sm:block\">Next</span>\n      <ChevronRightIcon />\n    </PaginationLink>\n  )\n}"
  },
  {
    "type": "function",
    "functionName": "PaginationEllipsis",
    "className": null,
    "parentClassName": null,
    "fileName": "pagination.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/pagination.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function PaginationEllipsis({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      aria-hidden\n      data-slot=\"pagination-ellipsis\"\n      className={cn(\"flex size-9 items-center justify-center\", className)}\n      {...props}\n    >\n      <MoreHorizontalIcon className=\"size-4\" />\n      <span className=\"sr-only\">More pages</span>\n    </span>\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "popover.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["Popover", "PopoverTrigger"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "popover.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "Popover",
    "className": null,
    "parentClassName": null,
    "fileName": "popover.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "function Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />\n}"
  },
  {
    "type": "function",
    "functionName": "PopoverTrigger",
    "className": null,
    "parentClassName": null,
    "fileName": "popover.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "function PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />\n}"
  },
  {
    "type": "imports",
    "fileName": "progress.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "progress.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "radio-group.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["RadioGroup", "RadioGroupItem"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "radio-group.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "RadioGroup",
    "className": null,
    "parentClassName": null,
    "fileName": "radio-group.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/radio-group.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function RadioGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {\n  return (\n    <RadioGroupPrimitive.Root\n      data-slot=\"radio-group\"\n      className={cn(\"grid gap-3\", className)}\n      {...props}\n    />\n  )\n}"
  },
  {
    "type": "function",
    "functionName": "RadioGroupItem",
    "className": null,
    "parentClassName": null,
    "fileName": "radio-group.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/radio-group.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function RadioGroupItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {\n  return (\n    <RadioGroupPrimitive.Item\n      data-slot=\"radio-group-item\"\n      className={cn(\n        \"border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator\n        data-slot=\"radio-group-indicator\"\n        className=\"relative flex items-center justify-center\"\n      >\n        <CircleIcon className=\"fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "resizable.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "resizable.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "scroll-area.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["ScrollArea", "ScrollBar"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "scroll-area.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "ScrollArea",
    "className": null,
    "parentClassName": null,
    "fileName": "scroll-area.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/scroll-area.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn(\"relative\", className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  )\n}"
  },
  {
    "type": "function",
    "functionName": "ScrollBar",
    "className": null,
    "parentClassName": null,
    "fileName": "scroll-area.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/scroll-area.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function ScrollBar({\n  className,\n  orientation = \"vertical\",\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        \"flex touch-none p-px transition-colors select-none\",\n        orientation === \"vertical\" &&\n          \"h-full w-2.5 border-l border-l-transparent\",\n        orientation === \"horizontal\" &&\n          \"h-2.5 flex-col border-t border-t-transparent\",\n        className\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "select.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [
      "Select",
      "SelectGroup",
      "SelectValue",
      "SelectTrigger",
      "SelectLabel",
      "SelectItem",
      "SelectSeparator",
      "SelectScrollUpButton",
      "SelectScrollDownButton"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "select.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "Select",
    "className": null,
    "parentClassName": null,
    "fileName": "select.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/components/ui/select.tsx"]
    },
    "globalVariables": [],
    "actualCode": "function Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}"
  },
  {
    "type": "function",
    "functionName": "SelectGroup",
    "className": null,
    "parentClassName": null,
    "fileName": "select.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/components/ui/select.tsx"]
    },
    "globalVariables": [],
    "actualCode": "function SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}"
  },
  {
    "type": "function",
    "functionName": "SelectValue",
    "className": null,
    "parentClassName": null,
    "fileName": "select.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/components/ui/select.tsx"]
    },
    "globalVariables": [],
    "actualCode": "function SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}"
  },
  {
    "type": "function",
    "functionName": "SelectTrigger",
    "className": null,
    "parentClassName": null,
    "fileName": "select.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/select.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\"\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}"
  },
  {
    "type": "function",
    "functionName": "SelectLabel",
    "className": null,
    "parentClassName": null,
    "fileName": "select.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/select.tsx",
        "topmostsourcing-frontend/components/ui/label.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  )\n}"
  },
  {
    "type": "function",
    "functionName": "SelectItem",
    "className": null,
    "parentClassName": null,
    "fileName": "select.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/select.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}"
  },
  {
    "type": "function",
    "functionName": "SelectSeparator",
    "className": null,
    "parentClassName": null,
    "fileName": "select.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/select.tsx",
        "topmostsourcing-frontend/components/ui/separator.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}"
  },
  {
    "type": "function",
    "functionName": "SelectScrollUpButton",
    "className": null,
    "parentClassName": null,
    "fileName": "select.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/select.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}"
  },
  {
    "type": "function",
    "functionName": "SelectScrollDownButton",
    "className": null,
    "parentClassName": null,
    "fileName": "select.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/select.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "separator.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["Separator"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "separator.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "Separator",
    "className": null,
    "parentClassName": null,
    "fileName": "separator.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/separator.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function Separator({\n  className,\n  orientation = \"horizontal\",\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px\",\n        className\n      )}\n      {...props}\n    />\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "sheet.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [
      "Sheet",
      "SheetTrigger",
      "SheetClose",
      "SheetPortal",
      "SheetOverlay"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "sheet.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "Sheet",
    "className": null,
    "parentClassName": null,
    "fileName": "sheet.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/components/ui/sheet.tsx"]
    },
    "globalVariables": [],
    "actualCode": "function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {\n  return <SheetPrimitive.Root data-slot=\"sheet\" {...props} />\n}"
  },
  {
    "type": "function",
    "functionName": "SheetTrigger",
    "className": null,
    "parentClassName": null,
    "fileName": "sheet.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/components/ui/sheet.tsx"]
    },
    "globalVariables": [],
    "actualCode": "function SheetTrigger({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {\n  return <SheetPrimitive.Trigger data-slot=\"sheet-trigger\" {...props} />\n}"
  },
  {
    "type": "function",
    "functionName": "SheetClose",
    "className": null,
    "parentClassName": null,
    "fileName": "sheet.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/components/ui/sheet.tsx"]
    },
    "globalVariables": [],
    "actualCode": "function SheetClose({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Close>) {\n  return <SheetPrimitive.Close data-slot=\"sheet-close\" {...props} />\n}"
  },
  {
    "type": "function",
    "functionName": "SheetPortal",
    "className": null,
    "parentClassName": null,
    "fileName": "sheet.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "function SheetPortal({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Portal>) {\n  return <SheetPrimitive.Portal data-slot=\"sheet-portal\" {...props} />\n}"
  },
  {
    "type": "function",
    "functionName": "SheetOverlay",
    "className": null,
    "parentClassName": null,
    "fileName": "sheet.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/lib/utils.ts",
        "topmostsourcing-frontend/components/ui/sheet.tsx"
      ]
    },
    "globalVariables": [],
    "actualCode": "function SheetOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {\n  return (\n    <SheetPrimitive.Overlay\n      data-slot=\"sheet-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SheetContent({\n  className,\n  children,\n  side = \"right\",\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Content> & {\n  side?: \"top\" | \"right\" | \"bottom\" | \"left\"\n}) {\n  return (\n    <SheetPortal>\n      <SheetOverlay />\n      <SheetPrimitive.Content\n        data-slot=\"sheet-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n          side === \"right\" &&\n            \"data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm\",\n          side === \"left\" &&\n            \"data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm\",\n          side === \"top\" &&\n            \"data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b\",\n          side === \"bottom\" &&\n            \"data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <SheetPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none\">\n          <XIcon className=\"size-4\" />\n          <span className=\"sr-only\">Close</span>\n        </SheetPrimitive.Close>\n      </SheetPrimitive.Content>\n    </SheetPortal>\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "sidebar.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["useSidebar", "handleKeyDown"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "sidebar.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "useSidebar",
    "className": null,
    "parentClassName": null,
    "fileName": "sidebar.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "function useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}"
  },
  {
    "type": "function",
    "functionName": "handleKeyDown",
    "className": null,
    "parentClassName": null,
    "fileName": "sidebar.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }"
  },
  {
    "type": "imports",
    "fileName": "skeleton.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "skeleton.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "slider.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["Slider"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "slider.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "Slider",
    "className": null,
    "parentClassName": null,
    "fileName": "slider.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "function Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root>) {\n  const _values = React.useMemo(\n    () =>\n      Array.isArray(value)\n        ? value\n        : Array.isArray(defaultValue)\n          ? defaultValue\n          : [min, max],\n    [value, defaultValue, min, max]\n  )\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}"
  },
  {
    "type": "imports",
    "fileName": "sonner.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "sonner.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "switch.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "switch.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "table.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "table.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "tabs.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["Tabs"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "tabs.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "Tabs",
    "className": null,
    "parentClassName": null,
    "fileName": "tabs.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/tabs.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "textarea.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "textarea.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "toast.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "toast.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "toaster.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "toaster.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "toggle-group.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "toggle-group.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "toggle.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "toggle.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "tooltip.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["TooltipContent"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "tooltip.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "TooltipContent",
    "className": null,
    "parentClassName": null,
    "fileName": "tooltip.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/tooltip.tsx",
        "topmostsourcing-frontend/lib/utils.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  )\n}"
  },
  {
    "type": "imports",
    "fileName": "use-mobile.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": ["useIsMobile", "onChange"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "use-mobile.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "useIsMobile",
    "className": null,
    "parentClassName": null,
    "fileName": "use-mobile.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/use-mobile.tsx",
        "topmostsourcing-frontend/hooks/use-mobile.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}"
  },
  {
    "type": "function",
    "functionName": "onChange",
    "className": null,
    "parentClassName": null,
    "fileName": "use-mobile.tsx",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "() => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }"
  },
  {
    "type": "imports",
    "fileName": "use-toast.ts",
    "folderName": "topmostsourcing-frontend/components/ui",
    "includingClasses": [],
    "includingFunctions": [
      "genId",
      "addToRemoveQueue",
      "reducer",
      "dispatch",
      "toast",
      "update",
      "dismiss",
      "useToast"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "use-toast.ts",
    "folderName": "topmostsourcing-frontend/components/ui",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "genId",
    "className": null,
    "parentClassName": null,
    "fileName": "use-toast.ts",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "function genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}"
  },
  {
    "type": "function",
    "functionName": "addToRemoveQueue",
    "className": null,
    "parentClassName": null,
    "fileName": "use-toast.ts",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}"
  },
  {
    "type": "function",
    "functionName": "reducer",
    "className": null,
    "parentClassName": null,
    "fileName": "use-toast.ts",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/use-toast.ts",
        "topmostsourcing-frontend/hooks/use-toast.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "(state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}"
  },
  {
    "type": "function",
    "functionName": "dispatch",
    "className": null,
    "parentClassName": null,
    "fileName": "use-toast.ts",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "function dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}"
  },
  {
    "type": "function",
    "functionName": "toast",
    "className": null,
    "parentClassName": null,
    "fileName": "use-toast.ts",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/use-toast.ts",
        "topmostsourcing-frontend/hooks/use-toast.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}"
  },
  {
    "type": "function",
    "functionName": "update",
    "className": null,
    "parentClassName": null,
    "fileName": "use-toast.ts",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/use-toast.ts",
        "topmostsourcing-frontend/hooks/use-toast.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "(props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })"
  },
  {
    "type": "function",
    "functionName": "dismiss",
    "className": null,
    "parentClassName": null,
    "fileName": "use-toast.ts",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "() => dispatch({ type: \"DISMISS_TOAST\", toastId: id })"
  },
  {
    "type": "function",
    "functionName": "useToast",
    "className": null,
    "parentClassName": null,
    "fileName": "use-toast.ts",
    "folderName": "topmostsourcing-frontend/components/ui",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/use-toast.ts",
        "topmostsourcing-frontend/hooks/use-toast.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}"
  },
  {
    "type": "imports",
    "fileName": "app-config.ts",
    "folderName": "topmostsourcing-frontend/config",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "app-config.ts",
    "folderName": "topmostsourcing-frontend/config",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "index.js",
    "folderName": "topmostsourcing-frontend/config",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "dotenv <- dotenv (dotenv)"
  },
  {
    "type": "globals",
    "fileName": "index.js",
    "folderName": "topmostsourcing-frontend/config",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "use-mobile.ts",
    "folderName": "topmostsourcing-frontend/hooks",
    "includingClasses": [],
    "includingFunctions": ["useIsMobile", "onChange"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "use-mobile.ts",
    "folderName": "topmostsourcing-frontend/hooks",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "useIsMobile",
    "className": null,
    "parentClassName": null,
    "fileName": "use-mobile.ts",
    "folderName": "topmostsourcing-frontend/hooks",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/use-mobile.tsx",
        "topmostsourcing-frontend/hooks/use-mobile.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}"
  },
  {
    "type": "function",
    "functionName": "onChange",
    "className": null,
    "parentClassName": null,
    "fileName": "use-mobile.ts",
    "folderName": "topmostsourcing-frontend/hooks",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "() => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }"
  },
  {
    "type": "imports",
    "fileName": "use-toast.ts",
    "folderName": "topmostsourcing-frontend/hooks",
    "includingClasses": [],
    "includingFunctions": [
      "genId",
      "addToRemoveQueue",
      "reducer",
      "dispatch",
      "toast",
      "update",
      "dismiss",
      "useToast"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "use-toast.ts",
    "folderName": "topmostsourcing-frontend/hooks",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "genId",
    "className": null,
    "parentClassName": null,
    "fileName": "use-toast.ts",
    "folderName": "topmostsourcing-frontend/hooks",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "function genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}"
  },
  {
    "type": "function",
    "functionName": "addToRemoveQueue",
    "className": null,
    "parentClassName": null,
    "fileName": "use-toast.ts",
    "folderName": "topmostsourcing-frontend/hooks",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}"
  },
  {
    "type": "function",
    "functionName": "reducer",
    "className": null,
    "parentClassName": null,
    "fileName": "use-toast.ts",
    "folderName": "topmostsourcing-frontend/hooks",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/use-toast.ts",
        "topmostsourcing-frontend/hooks/use-toast.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "(state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}"
  },
  {
    "type": "function",
    "functionName": "dispatch",
    "className": null,
    "parentClassName": null,
    "fileName": "use-toast.ts",
    "folderName": "topmostsourcing-frontend/hooks",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "function dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}"
  },
  {
    "type": "function",
    "functionName": "toast",
    "className": null,
    "parentClassName": null,
    "fileName": "use-toast.ts",
    "folderName": "topmostsourcing-frontend/hooks",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/use-toast.ts",
        "topmostsourcing-frontend/hooks/use-toast.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}"
  },
  {
    "type": "function",
    "functionName": "update",
    "className": null,
    "parentClassName": null,
    "fileName": "use-toast.ts",
    "folderName": "topmostsourcing-frontend/hooks",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/use-toast.ts",
        "topmostsourcing-frontend/hooks/use-toast.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "(props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })"
  },
  {
    "type": "function",
    "functionName": "dismiss",
    "className": null,
    "parentClassName": null,
    "fileName": "use-toast.ts",
    "folderName": "topmostsourcing-frontend/hooks",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "() => dispatch({ type: \"DISMISS_TOAST\", toastId: id })"
  },
  {
    "type": "function",
    "functionName": "useToast",
    "className": null,
    "parentClassName": null,
    "fileName": "use-toast.ts",
    "folderName": "topmostsourcing-frontend/hooks",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-frontend/components/ui/use-toast.ts",
        "topmostsourcing-frontend/hooks/use-toast.ts"
      ]
    },
    "globalVariables": [],
    "actualCode": "function useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}"
  },
  {
    "type": "imports",
    "fileName": "data.ts",
    "folderName": "topmostsourcing-frontend/lib",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "data.ts",
    "folderName": "topmostsourcing-frontend/lib",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "utils.ts",
    "folderName": "topmostsourcing-frontend/lib",
    "includingClasses": [],
    "includingFunctions": ["cn"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "utils.ts",
    "folderName": "topmostsourcing-frontend/lib",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "cn",
    "className": null,
    "parentClassName": null,
    "fileName": "utils.ts",
    "folderName": "topmostsourcing-frontend/lib",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": ["topmostsourcing-frontend/lib/utils.ts"]
    },
    "globalVariables": [],
    "actualCode": "function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}"
  },
  {
    "type": "imports",
    "fileName": "next-env.d.ts",
    "folderName": "topmostsourcing-frontend",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "next-env.d.ts",
    "folderName": "topmostsourcing-frontend",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "query-provider.tsx",
    "folderName": "topmostsourcing-frontend/providers",
    "includingClasses": [],
    "includingFunctions": ["QueryProvider"],
    "actualCode": "React <- react (react)"
  },
  {
    "type": "globals",
    "fileName": "query-provider.tsx",
    "folderName": "topmostsourcing-frontend/providers",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "QueryProvider",
    "className": null,
    "parentClassName": null,
    "fileName": "query-provider.tsx",
    "folderName": "topmostsourcing-frontend/providers",
    "upstreamDependencies": {
      "imports": ["react"],
      "crossFileImports": [
        "topmostsourcing-frontend/providers/query-provider.tsx"
      ]
    },
    "globalVariables": [],
    "actualCode": "function QueryProvider({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) {\r\n  return <QueryClientProvider client={client}>{children}</QueryClientProvider>;\r\n}"
  },
  {
    "type": "imports",
    "fileName": "api.ts",
    "folderName": "topmostsourcing-frontend/services",
    "includingClasses": [],
    "includingFunctions": [
      "getProducts",
      "getProduct",
      "getBlogs",
      "getBlog",
      "createInvestor",
      "loginInvestor",
      "getInvestments",
      "getRoi",
      "getInvestor",
      "withdrawFunds",
      "getCategories",
      "sendMail"
    ],
    "actualCode": "Axios <- axios (axios)"
  },
  {
    "type": "globals",
    "fileName": "api.ts",
    "folderName": "topmostsourcing-frontend/services",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "getProducts",
    "className": null,
    "parentClassName": null,
    "fileName": "api.ts",
    "folderName": "topmostsourcing-frontend/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (query?: string) => {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `${apiRoutes.productRoute}${query ? `?${query}` : \"\"}`\r\n    );\r\n\r\n    return data;\r\n  } catch (error) {\r\n    process.env.NODE_ENV === \"development\" && console.log(error);\r\n    return [];\r\n  }\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProduct",
    "className": null,
    "parentClassName": null,
    "fileName": "api.ts",
    "folderName": "topmostsourcing-frontend/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (id: string) => {\r\n  try {\r\n    const { data } = await axios.get(`${apiRoutes.productRoute}/${id}`);\r\n    return data;\r\n  } catch (error) {\r\n    process.env.NODE_ENV === \"development\" && console.log(error);\r\n    return [];\r\n  }\r\n}"
  },
  {
    "type": "function",
    "functionName": "getBlogs",
    "className": null,
    "parentClassName": null,
    "fileName": "api.ts",
    "folderName": "topmostsourcing-frontend/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (pageParam: number, query?: string) => {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `${apiRoutes.blogRoute}?page=${pageParam}&limit=10${\r\n        query ? `${query}` : \"\"\r\n      }`\r\n    );\r\n\r\n    return data;\r\n  } catch (error) {\r\n    process.env.NODE_ENV === \"development\" && console.log(error);\r\n    return [];\r\n  }\r\n}"
  },
  {
    "type": "function",
    "functionName": "getBlog",
    "className": null,
    "parentClassName": null,
    "fileName": "api.ts",
    "folderName": "topmostsourcing-frontend/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (id: string) => {\r\n  try {\r\n    const { data } = await axios.get(`${apiRoutes.blogRoute}/${id}`);\r\n\r\n    return data;\r\n  } catch (error) {\r\n    process.env.NODE_ENV === \"development\" && console.log(error);\r\n    return [];\r\n  }\r\n}"
  },
  {
    "type": "function",
    "functionName": "createInvestor",
    "className": null,
    "parentClassName": null,
    "fileName": "api.ts",
    "folderName": "topmostsourcing-frontend/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (investorData: any) => {\r\n  try {\r\n    const { data } = await axios.post(\r\n      `${apiRoutes.investorRoute}`,\r\n      investorData\r\n    );\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n    process.env.NODE_ENV === \"development\" && console.log(error);\r\n    throw error;\r\n  }\r\n}"
  },
  {
    "type": "function",
    "functionName": "loginInvestor",
    "className": null,
    "parentClassName": null,
    "fileName": "api.ts",
    "folderName": "topmostsourcing-frontend/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (investorData: any) => {\r\n  try {\r\n    const { data } = await axios.post(\r\n      `${apiRoutes.investorRoute}/login`,\r\n      investorData\r\n    );\r\n    return data;\r\n  } catch (error) {\r\n    process.env.NODE_ENV === \"development\" && console.log(error);\r\n    return [];\r\n  }\r\n}"
  },
  {
    "type": "function",
    "functionName": "getInvestments",
    "className": null,
    "parentClassName": null,
    "fileName": "api.ts",
    "folderName": "topmostsourcing-frontend/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (id?: string) => {\r\n  try {\r\n    const { data } = await axios.get(`${apiRoutes.investRoute}/investor/${id}`);\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n    process.env.NODE_ENV === \"development\" && console.log(error);\r\n    throw error;\r\n  }\r\n}"
  },
  {
    "type": "function",
    "functionName": "getRoi",
    "className": null,
    "parentClassName": null,
    "fileName": "api.ts",
    "folderName": "topmostsourcing-frontend/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async () => {\r\n  try {\r\n    const { data } = await axios.get(`${apiRoutes.roiRoute}`);\r\n\r\n    return data;\r\n  } catch (error) {\r\n    process.env.NODE_ENV === \"development\" && console.log(error);\r\n    throw error;\r\n  }\r\n}"
  },
  {
    "type": "function",
    "functionName": "getInvestor",
    "className": null,
    "parentClassName": null,
    "fileName": "api.ts",
    "folderName": "topmostsourcing-frontend/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (id?: string) => {\r\n  try {\r\n    const { data } = await axios.get(`${apiRoutes.investorRoute}/get/${id}`);\r\n    return data;\r\n  } catch (error) {\r\n    process.env.NODE_ENV === \"development\" && console.log(error);\r\n    throw error;\r\n  }\r\n}"
  },
  {
    "type": "function",
    "functionName": "withdrawFunds",
    "className": null,
    "parentClassName": null,
    "fileName": "api.ts",
    "folderName": "topmostsourcing-frontend/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (id: string) => {\r\n  try {\r\n    const { data } = await axios.patch(\r\n      `${apiRoutes.investRoute}/withdraw/investor/${id}`\r\n    );\r\n    return data;\r\n  } catch (error) {\r\n    process.env.NODE_ENV === \"development\" && console.log(error);\r\n    throw error;\r\n  }\r\n}"
  },
  {
    "type": "function",
    "functionName": "getCategories",
    "className": null,
    "parentClassName": null,
    "fileName": "api.ts",
    "folderName": "topmostsourcing-frontend/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async () => {\r\n  try {\r\n    const { data } = await axios.get(`${apiRoutes.categoryRoute}`);\r\n    return data?.categories || [];\r\n  } catch (error) {\r\n    process.env.NODE_ENV === \"development\" && console.log(error);\r\n    throw error;\r\n  }\r\n}"
  },
  {
    "type": "function",
    "functionName": "sendMail",
    "className": null,
    "parentClassName": null,
    "fileName": "api.ts",
    "folderName": "topmostsourcing-frontend/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (mailData: MailData) => {\r\n  try {\r\n    const { data } = await axios.post(`${apiRoutes.userRoute}/mail`, mailData);\r\n\r\n    return data;\r\n  } catch (error) {\r\n    process.env.NODE_ENV === \"development\" && console.log(error);\r\n    throw error;\r\n  }\r\n}"
  },
  {
    "type": "imports",
    "fileName": "query-options.ts",
    "folderName": "topmostsourcing-frontend/services",
    "includingClasses": [],
    "includingFunctions": [
      "getProductsOption",
      "getBlogsOption",
      "getProductOption",
      "getBlogOption",
      "getInvestmentsOption",
      "getRoiOption",
      "getInvestorOption",
      "getCategoriesOption"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "query-options.ts",
    "folderName": "topmostsourcing-frontend/services",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "getProductsOption",
    "className": null,
    "parentClassName": null,
    "fileName": "query-options.ts",
    "folderName": "topmostsourcing-frontend/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(query?: string) => {\r\n  return queryOptions({\r\n    queryKey: [\"products\", query],\r\n    queryFn: () => getProducts(query),\r\n  });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getBlogsOption",
    "className": null,
    "parentClassName": null,
    "fileName": "query-options.ts",
    "folderName": "topmostsourcing-frontend/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(query?: string) => {\r\n  return infiniteQueryOptions({\r\n    queryKey: [\"blogs\", query],\r\n    queryFn: ({ pageParam = 1 }) => getBlogs(pageParam as number, query),\r\n    initialPageParam: 1,\r\n    getNextPageParam: (lastPage) => {\r\n      return lastPage.pagination?.hasNextPage\r\n        ? Number(lastPage.pagination?.page) + 1\r\n        : null;\r\n    },\r\n  });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductOption",
    "className": null,
    "parentClassName": null,
    "fileName": "query-options.ts",
    "folderName": "topmostsourcing-frontend/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(id: string) => {\r\n  return queryOptions({\r\n    queryKey: [\"product\", id],\r\n    queryFn: () => getProduct(id),\r\n  });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getBlogOption",
    "className": null,
    "parentClassName": null,
    "fileName": "query-options.ts",
    "folderName": "topmostsourcing-frontend/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(id: string) => {\r\n  return queryOptions({\r\n    queryKey: [\"blog\", id],\r\n    queryFn: () => getBlog(id),\r\n  });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getInvestmentsOption",
    "className": null,
    "parentClassName": null,
    "fileName": "query-options.ts",
    "folderName": "topmostsourcing-frontend/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(id?: string) => {\r\n  return queryOptions({\r\n    queryKey: [\"investments\", id],\r\n    queryFn: () => getInvestments(id),\r\n    enabled: !!useInvestorStore.getState().investorData?._id,\r\n  });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getRoiOption",
    "className": null,
    "parentClassName": null,
    "fileName": "query-options.ts",
    "folderName": "topmostsourcing-frontend/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "() => {\r\n  return queryOptions({\r\n    queryKey: [\"roi\"],\r\n    queryFn: () => getRoi(),\r\n  });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getInvestorOption",
    "className": null,
    "parentClassName": null,
    "fileName": "query-options.ts",
    "folderName": "topmostsourcing-frontend/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(id?: string) => {\r\n  return queryOptions({\r\n    queryKey: [\"investor\", id],\r\n    queryFn: () => getInvestor(id),\r\n  });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getCategoriesOption",
    "className": null,
    "parentClassName": null,
    "fileName": "query-options.ts",
    "folderName": "topmostsourcing-frontend/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "() => {\r\n  return queryOptions({\r\n    queryKey: [\"categories\"],\r\n    queryFn: () => getCategories(),\r\n  });\r\n}"
  },
  {
    "type": "imports",
    "fileName": "app.js",
    "folderName": "topmostsourcing-frontend/src",
    "includingClasses": [],
    "includingFunctions": ["start"],
    "actualCode": "express <- express (express)\ncookieParser <- cookie-parser (cookie-parser)\ncors <- cors (cors)\nxss <- xss-clean (xss-clean)\nmongoSanitize <- express-mongo-sanitize (express-mongo-sanitize)\nrateLimit <- express-rate-limit (express-rate-limit)\nhelmet <- helmet (helmet)\nuserRoute <- ./routes/user.route.js (topmostsourcing-frontend/src/routes/user.route.js)\ninvestorRoute <- ./routes/investor.route.js (topmostsourcing-frontend/src/routes/investor.route.js)\ninvestRoute <- ./routes/invest.route.js (topmostsourcing-frontend/src/routes/invest.route.js)\nproductRoute <- ./routes/product.route.js (topmostsourcing-frontend/src/routes/product.route.js)\nroiRoute <- ./routes/roi.route.js (topmostsourcing-frontend/src/routes/roi.route.js)\nblogRoute <- ./routes/blog.route.js (topmostsourcing-frontend/src/routes/blog.route.js)\ncategoryRoute <- ./routes/category.route.js (topmostsourcing-frontend/src/routes/category.route.js)\nproductParentCategoryRoute <- ./routes/product-parent-category.route.js (topmostsourcing-frontend/src/routes/product-parent-category.route.js)\nproductCategoryRoute <- ./routes/product-category.route.js (topmostsourcing-frontend/src/routes/product-category.route.js)\nproductSubategoryRoute <- ./routes/product-subcategory.js (topmostsourcing-frontend/src/routes/product-subcategory.js)\ncompression <- compression (compression)"
  },
  {
    "type": "globals",
    "fileName": "app.js",
    "folderName": "topmostsourcing-frontend/src",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "start",
    "className": null,
    "parentClassName": null,
    "fileName": "app.js",
    "folderName": "topmostsourcing-frontend/src",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async () => {\r\n  try {\r\n    await connectToDB(config.mongoUri);\r\n    app.listen(port, () => {\r\n      console.log(`Server listening on port ${port}`);\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}"
  },
  {
    "type": "imports",
    "fileName": "blog.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "includingClasses": [],
    "includingFunctions": [
      "createBlog",
      "updateBlog",
      "getAllBlog",
      "getBlog",
      "deleteBlog",
      "uploadBlogImages",
      "totalblogs",
      "getAllRelatedBlogs"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "blog.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createBlog",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const blogData = req.body;\r\n  if (!blogData) {\r\n    throw new BadRequest(\"Blog data not found\");\r\n  }\r\n  if (req.file) {\r\n    const blogImage = req.file;\r\n    blogData.imageUrl = blogImage.filename;\r\n  }\r\n  const result = await blogService.createBlogService(blogData);\r\n  return res.status(201).json({ blog: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateBlog",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const blogData = req.body;\r\n  const { id } = req.params;\r\n  if (!blogData || !id) {\r\n    throw new BadRequest(\"Blog data not found\");\r\n  }\r\n  if (req.file) {\r\n    const blogImage = req.file;\r\n    blogData.imageUrl = blogImage.filename;\r\n  }\r\n  const result = await blogService.updateBlogService(blogData, id);\r\n  return res.status(200).json({ blog: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllBlog",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { page, limit, query, category, skipValue } = req.query;\r\n  const blogs = await blogService.getAllBlogService({\r\n    page,\r\n    limit,\r\n    skipValue,\r\n    query,\r\n    category,\r\n  });\r\n\r\n  return res.status(200).json(blogs);\r\n}"
  },
  {
    "type": "function",
    "functionName": "getBlog",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  const blog = await blogService.getBlogService(id);\r\n  return res.status(200).json(blog);\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteBlog",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  await blogService.deleteBlogService(id);\r\n  return res.status(200).json({ message: \"Blog deleted\" });\r\n}"
  },
  {
    "type": "function",
    "functionName": "uploadBlogImages",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  if (!req.file) {\r\n    throw new BadRequest(\"Image not found\");\r\n  }\r\n  const imageUrl = req.file.filename;\r\n  return res.status(200).json({ imageUrl });\r\n}"
  },
  {
    "type": "function",
    "functionName": "totalblogs",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const count = await blogService.getBlogsCount();\r\n  return res.status(200).json({ count });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllRelatedBlogs",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { page, limit, query, category, skipValue } = req.query;\r\n  const { id } = req.params;\r\n  const blogs = await blogService.getAllRelatedlogService({\r\n    page,\r\n    limit,\r\n    skipValue,\r\n    query,\r\n    category,\r\n    id,\r\n  });\r\n  return res.status(200).json({ blogs });\r\n}"
  },
  {
    "type": "imports",
    "fileName": "category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "includingClasses": [],
    "includingFunctions": [
      "createCategory",
      "updateCategory",
      "getAllCategory",
      "getCategory",
      "deleteCategory",
      "totalCategories"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const categoryData = req.body;\r\n  if (!categoryData) {\r\n    throw new BadRequest(\"Category data not found\");\r\n  }\r\n  const result = await categoryService.createCategoryService(categoryData);\r\n  return res.status(201).json({ category: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const categoryData = req.body;\r\n  const { id } = req.params;\r\n  if (!categoryData || !id) {\r\n    throw new BadRequest(\"Category data not found\");\r\n  }\r\n  const result = await categoryService.updateCategoryService(categoryData, id);\r\n  return res.status(200).json({ category: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { page, limit, query } = req.query;\r\n  const categories = await categoryService.getAllCategoryService(\r\n    page,\r\n    limit,\r\n    query\r\n  );\r\n  return res.status(200).json({ categories });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  const category = await categoryService.getCategoryService(id);\r\n  return res.status(200).json({ category });\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  await categoryService.deleteCategoryService(id);\r\n  return res.status(200).json({ message: \"Category deleted\" });\r\n}"
  },
  {
    "type": "function",
    "functionName": "totalCategories",
    "className": null,
    "parentClassName": null,
    "fileName": "category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const count = await categoryService.getCategoryCount();\r\n  return res.status(200).json({ count });\r\n}"
  },
  {
    "type": "imports",
    "fileName": "invest.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "includingClasses": [],
    "includingFunctions": [
      "createInvest",
      "updateInvest",
      "getAllInvest",
      "withdrawFunds"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "invest.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createInvest",
    "className": null,
    "parentClassName": null,
    "fileName": "invest.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const data = req.body;\r\n  const invest = await investService.createInvest(data);\r\n  return res.status(201).json(invest);\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateInvest",
    "className": null,
    "parentClassName": null,
    "fileName": "invest.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  const data = req.body;\r\n  const invest = await investService.updateInvest(id, data);\r\n  return res.status(200).json(invest);\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllInvest",
    "className": null,
    "parentClassName": null,
    "fileName": "invest.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { investorId } = req.params;\r\n  const investments = await investService.getAllInvest(investorId);\r\n  return res.status(200).json(investments);\r\n}"
  },
  {
    "type": "function",
    "functionName": "withdrawFunds",
    "className": null,
    "parentClassName": null,
    "fileName": "invest.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { investorId } = req.params;\r\n  const investments = await investService.withdrawFunds(investorId);\r\n  return res.status(200).json(investments);\r\n}"
  },
  {
    "type": "imports",
    "fileName": "investor.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "includingClasses": [],
    "includingFunctions": ["createInvestor", "loginInvestor", "getInvestor"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "investor.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createInvestor",
    "className": null,
    "parentClassName": null,
    "fileName": "investor.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const data = req.body;\r\n  const investor = await investorService.createInvestor(data);\r\n  return res.status(201).json({ investor });\r\n}"
  },
  {
    "type": "function",
    "functionName": "loginInvestor",
    "className": null,
    "parentClassName": null,
    "fileName": "investor.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { phone } = req.body;\r\n  const investor = await investorService.loginInvestor(phone);\r\n  return res.status(200).json(investor);\r\n}"
  },
  {
    "type": "function",
    "functionName": "getInvestor",
    "className": null,
    "parentClassName": null,
    "fileName": "investor.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  const investor = await investorService.getInvestor(id);\r\n  return res.status(200).json(investor);\r\n}"
  },
  {
    "type": "imports",
    "fileName": "product-category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "includingClasses": [],
    "includingFunctions": [
      "createProductCategory",
      "updateProductCategory",
      "getAllProductCategory",
      "getProductCategory",
      "deleteProductCategory",
      "totalProductCategories"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "product-category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createProductCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const categoryData = req.body;\r\n  if (!categoryData) {\r\n    throw new BadRequest(\"Category data not found\");\r\n  }\r\n  const result = await productCategoryService.createProductCategoryService(\r\n    categoryData\r\n  );\r\n  return res.status(201).json({ category: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateProductCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const categoryData = req.body;\r\n  const { id } = req.params;\r\n  if (!categoryData || !id) {\r\n    throw new BadRequest(\"Category data not found\");\r\n  }\r\n  const result = await productCategoryService.updateProductCategoryService(\r\n    categoryData,\r\n    id\r\n  );\r\n  return res.status(200).json({ category: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllProductCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { page, limit, query, skip, parent } = req.query;\r\n  const categories = await productCategoryService.getAllProductCategoryService(\r\n    page,\r\n    limit,\r\n    query,\r\n    skip,\r\n    parent\r\n  );\r\n  return res.status(200).json({ categories });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  const category = await productCategoryService.getProductCategoryService(id);\r\n  return res.status(200).json({ category });\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteProductCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  await productCategoryService.deleteProductCategoryService(id);\r\n  return res.status(200).json({ message: \"Category deleted\" });\r\n}"
  },
  {
    "type": "function",
    "functionName": "totalProductCategories",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const count = await productCategoryService.getProductCategoryCountService();\r\n  return res.status(200).json({ count });\r\n}"
  },
  {
    "type": "imports",
    "fileName": "product-parent-category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "includingClasses": [],
    "includingFunctions": [
      "createProductParentCategory",
      "updateProductParentCategory",
      "getAllProductParentCategory",
      "getProductParentCategory",
      "deleteProductParentCategory",
      "totalProductParentCategories"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "product-parent-category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createProductParentCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const categoryData = req.body;\r\n  if (!categoryData) {\r\n    throw new BadRequest(\"Parent category data not found\");\r\n  }\r\n  const result =\r\n    await productParentCategoryService.createProductParentCategoryService(\r\n      categoryData\r\n    );\r\n  return res.status(201).json({ parentCategory: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateProductParentCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const categoryData = req.body;\r\n  const { id } = req.params;\r\n  if (!categoryData || !id) {\r\n    throw new BadRequest(\"Parent category data not found\");\r\n  }\r\n  const result =\r\n    await productParentCategoryService.updateProductParentCategoryService(\r\n      categoryData,\r\n      id\r\n    );\r\n  return res.status(200).json({ parentCategory: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllProductParentCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { page, limit, query, skip } = req.query;\r\n  const parentCategories =\r\n    await productParentCategoryService.getAllProductParentCategoryService(\r\n      page,\r\n      limit,\r\n      query,\r\n      skip\r\n    );\r\n  return res.status(200).json({ parentCategories });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductParentCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  const parentCategory =\r\n    await productParentCategoryService.getProductParentCategoryService(id);\r\n  return res.status(200).json({ parentCategory });\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteProductParentCategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  await productParentCategoryService.deleteProductParentCategoryService(id);\r\n  return res.status(200).json({ message: \"Parent category deleted\" });\r\n}"
  },
  {
    "type": "function",
    "functionName": "totalProductParentCategories",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const count =\r\n    await productParentCategoryService.getProductParentCategoryCountService();\r\n  return res.status(200).json({ count });\r\n}"
  },
  {
    "type": "imports",
    "fileName": "product-subcategory.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "includingClasses": [],
    "includingFunctions": [
      "createProductSubcategory",
      "updateProductSubcategory",
      "getAllProductSubcategory",
      "getProductSubcategory",
      "deleteProductSubcategory",
      "totalProductSubcategories"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "product-subcategory.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createProductSubcategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const subcategoryData = req.body;\r\n  if (!subcategoryData) {\r\n    throw new BadRequest(\"Subcategory data not found\");\r\n  }\r\n  const result =\r\n    await productSubcategoryService.createProductSubcategoryService(\r\n      subcategoryData\r\n    );\r\n  return res.status(201).json({ subcategory: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateProductSubcategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const subcategoryData = req.body;\r\n  const { id } = req.params;\r\n  if (!subcategoryData || !id) {\r\n    throw new BadRequest(\"Subcategory data not found\");\r\n  }\r\n  const result =\r\n    await productSubcategoryService.updateProductSubcategoryService(\r\n      subcategoryData,\r\n      id\r\n    );\r\n  return res.status(200).json({ subcategory: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllProductSubcategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { page, limit, query, skip, parent } = req.query;\r\n  const subcategories =\r\n    await productSubcategoryService.getAllProductSubcategoryService(\r\n      page,\r\n      limit,\r\n      query,\r\n      skip,\r\n      parent\r\n    );\r\n  return res.status(200).json({ subcategories });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductSubcategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  const subcategory =\r\n    await productSubcategoryService.getProductSubcategoryService(id);\r\n  return res.status(200).json({ subcategory });\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteProductSubcategory",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  await productSubcategoryService.deleteProductSubcategoryService(id);\r\n  return res.status(200).json({ message: \"Subcategory deleted\" });\r\n}"
  },
  {
    "type": "function",
    "functionName": "totalProductSubcategories",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const count =\r\n    await productSubcategoryService.getProductSubcategoryCountService();\r\n  return res.status(200).json({ count });\r\n}"
  },
  {
    "type": "imports",
    "fileName": "product.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "includingClasses": [],
    "includingFunctions": [
      "createProduct",
      "updateProduct",
      "updateSecondaryImages",
      "getAllProduct",
      "getAllProductExceptOne",
      "getProduct",
      "deleteProduct",
      "totalProducts",
      "requestQuotation"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "product.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createProduct",
    "className": null,
    "parentClassName": null,
    "fileName": "product.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const productData = req.body;\r\n  if (req.files && req.files.primaryImage) {\r\n    const primaryImage = req.files.primaryImage[0];\r\n    productData.imageUrl = primaryImage.filename;\r\n  }\r\n  if (req.files && req.files.secondaryImages) {\r\n    const secondaryImages = req.files.secondaryImages;\r\n    productData.secondaryImages = secondaryImages.map((file) => file.filename);\r\n  }\r\n  if (!productData) {\r\n    throw new BadRequest(\"Product data not found\");\r\n  }\r\n  const result = await productService.createProductService(productData);\r\n  return res.status(201).json({ product: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateProduct",
    "className": null,
    "parentClassName": null,
    "fileName": "product.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const productData = req.body;\r\n  const { id } = req.params;\r\n  if (!productData || !id) {\r\n    throw new BadRequest(\"Product data not found\");\r\n  }\r\n  if (req.files && req.files.primaryImage) {\r\n    const primaryImage = req.files.primaryImage[0];\r\n    productData.imageUrl = primaryImage.filename;\r\n  }\r\n  if (req.files && req.files.secondaryImages) {\r\n    const secondaryImages = req.files.secondaryImages;\r\n    productData.secondaryImages = secondaryImages.map((file) => file.filename);\r\n  }\r\n  const result = await productService.updateProductService(productData, id);\r\n  return res.status(200).json({ product: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateSecondaryImages",
    "className": null,
    "parentClassName": null,
    "fileName": "product.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { image } = req.query;\r\n  const { id } = req.params;\r\n  if (!image || !id) {\r\n    throw new BadRequest(\"Invalid request\");\r\n  }\r\n  const result = await productService.updateSecondaryImagesService(image, id);\r\n  return res.status(200).json({ imageUrl: result });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllProduct",
    "className": null,
    "parentClassName": null,
    "fileName": "product.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const {\r\n    page,\r\n    limit,\r\n    query,\r\n    skipValue,\r\n    category,\r\n    parentCategory,\r\n    subcategory,\r\n  } = req.query;\r\n  const products = await productService.getAllProductService({\r\n    page,\r\n    limit,\r\n    skipValue,\r\n    query,\r\n    category,\r\n    parentCategory,\r\n    subcategory,\r\n  });\r\n  return res.status(200).json(products);\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllProductExceptOne",
    "className": null,
    "parentClassName": null,
    "fileName": "product.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { page, limit, query, category, skipValue } = req.query;\r\n  const { id } = req.params;\r\n  const products = await productService.getAllProductExceptOneService({\r\n    page,\r\n    limit,\r\n    skipValue,\r\n    query,\r\n    category,\r\n    id,\r\n  });\r\n  return res.status(200).json({ products });\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProduct",
    "className": null,
    "parentClassName": null,
    "fileName": "product.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  const product = await productService.getProductService(id);\r\n  return res.status(200).json(product);\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteProduct",
    "className": null,
    "parentClassName": null,
    "fileName": "product.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  await productService.deleteProductService(id);\r\n  return res.status(200).json({ message: \"Product deleted\" });\r\n}"
  },
  {
    "type": "function",
    "functionName": "totalProducts",
    "className": null,
    "parentClassName": null,
    "fileName": "product.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { query, category, parentCategory, subcategory } = req.query;\r\n  const count = await productService.getProductCount({\r\n    query,\r\n    category,\r\n    parentCategory,\r\n    subcategory,\r\n  });\r\n  return res.status(200).json({ count });\r\n}"
  },
  {
    "type": "function",
    "functionName": "requestQuotation",
    "className": null,
    "parentClassName": null,
    "fileName": "product.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const productData = req.body;\r\n  if (req.files && req.files.uploadedFiles) {\r\n    const uploadedFiles = req.files.uploadedFiles;\r\n    productData.uploadedFiles = uploadedFiles.map((file) => file.filename);\r\n  }\r\n  if (!productData) {\r\n    throw new BadRequest(\"Product data not found\");\r\n  }\r\n  const result = await productService.requestQuotationService(productData);\r\n  return res.status(201).json({ success: true, message: \"Request sent!\" });\r\n}"
  },
  {
    "type": "imports",
    "fileName": "roi.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "includingClasses": [],
    "includingFunctions": ["createRoi", "updateRoi", "getAllRoi"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "roi.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createRoi",
    "className": null,
    "parentClassName": null,
    "fileName": "roi.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const data = req.body;\r\n  const roi = await roiService.createRoi(data);\r\n  return res.status(201).json(roi);\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateRoi",
    "className": null,
    "parentClassName": null,
    "fileName": "roi.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { id } = req.params;\r\n  const data = req.body;\r\n  const roi = await roiService.updateRoi(id, data);\r\n  return res.status(200).json(roi);\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllRoi",
    "className": null,
    "parentClassName": null,
    "fileName": "roi.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const rois = await roiService.getAllRoi();\r\n  return res.status(200).json(rois);\r\n}"
  },
  {
    "type": "imports",
    "fileName": "user.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "includingClasses": [],
    "includingFunctions": ["loginUser", "logout", "sendMail"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "user.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "loginUser",
    "className": null,
    "parentClassName": null,
    "fileName": "user.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js",
        "topmostsourcing-backend/src/utils/index.js",
        "topmostsourcing-frontend/src/utils/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const user = await userService.loginUser(req);\r\n  if (!user) {\r\n    throw new BadRequest(\"Something went wrong\");\r\n  }\r\n  attachCookiesToResponse({ res, user });\r\n  return res.status(200).json({ message: \"Login successfull\" });\r\n}"
  },
  {
    "type": "function",
    "functionName": "logout",
    "className": null,
    "parentClassName": null,
    "fileName": "user.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  res.clearCookie(\"top_most_outsourcing_token\");\r\n  return res.status(200).json({ message: \"user logged out\" });\r\n}"
  },
  {
    "type": "function",
    "functionName": "sendMail",
    "className": null,
    "parentClassName": null,
    "fileName": "user.controller.js",
    "folderName": "topmostsourcing-frontend/src/controllers",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req, res) => {\r\n  const { name, email, phone, subject, mailText } = req.body;\r\n  if (!name || !email || !phone || !subject || !mailText) {\r\n    throw new BadRequest(\"Please provide your details\");\r\n  }\r\n  const result = await userService.sendMailService({\r\n    name,\r\n    email,\r\n    phone,\r\n    subject,\r\n    mailText,\r\n  });\r\n  return res.status(200).json({ message: \"Mail sent\" });\r\n}"
  },
  {
    "type": "imports",
    "fileName": "connect.js",
    "folderName": "topmostsourcing-frontend/src/db",
    "includingClasses": [],
    "includingFunctions": ["connectToDB"],
    "actualCode": "mongoose <- mongoose (mongoose)"
  },
  {
    "type": "globals",
    "fileName": "connect.js",
    "folderName": "topmostsourcing-frontend/src/db",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "connectToDB",
    "className": null,
    "parentClassName": null,
    "fileName": "connect.js",
    "folderName": "topmostsourcing-frontend/src/db",
    "upstreamDependencies": {
      "imports": ["mongoose"],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(url) => {\r\n  return mongoose.connect(url);\r\n}"
  },
  {
    "type": "imports",
    "fileName": "badRequest.js",
    "folderName": "topmostsourcing-frontend/src/errors",
    "includingClasses": ["BadRequest"],
    "includingFunctions": [],
    "actualCode": "CustomApiError <- ./customApiError.js (topmostsourcing-frontend/src/errors/customApiError.js)"
  },
  {
    "type": "globals",
    "fileName": "badRequest.js",
    "folderName": "topmostsourcing-frontend/src/errors",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "BadRequest.constructor",
    "className": "BadRequest",
    "parentClassName": null,
    "fileName": "badRequest.js",
    "folderName": "topmostsourcing-frontend/src/errors",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "constructor(message) {\r\n    super(message);\r\n    this.statusCode = StatusCodes.BAD_REQUEST;\r\n  }"
  },
  {
    "type": "imports",
    "fileName": "customApiError.js",
    "folderName": "topmostsourcing-frontend/src/errors",
    "includingClasses": ["CustomApiError"],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "customApiError.js",
    "folderName": "topmostsourcing-frontend/src/errors",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "CustomApiError.constructor",
    "className": "CustomApiError",
    "parentClassName": null,
    "fileName": "customApiError.js",
    "folderName": "topmostsourcing-frontend/src/errors",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "constructor(message) {\r\n    super(message);\r\n  }"
  },
  {
    "type": "imports",
    "fileName": "index.js",
    "folderName": "topmostsourcing-frontend/src/errors",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "BadRequest <- ./badRequest.js (topmostsourcing-frontend/src/errors/badRequest.js)\nCustomApiError <- ./customApiError.js (topmostsourcing-frontend/src/errors/customApiError.js)\nNotFound <- ./notFound.js (topmostsourcing-frontend/src/errors/notFound.js)\nUnauthenticated <- ./unauthenticated.js (topmostsourcing-frontend/src/errors/unauthenticated.js)\nUnAuthorized <- ./unauthorized.js (topmostsourcing-frontend/src/errors/unauthorized.js)"
  },
  {
    "type": "globals",
    "fileName": "index.js",
    "folderName": "topmostsourcing-frontend/src/errors",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "notFound.js",
    "folderName": "topmostsourcing-frontend/src/errors",
    "includingClasses": ["NotFound"],
    "includingFunctions": [],
    "actualCode": "CustomApiError <- ./customApiError.js (topmostsourcing-frontend/src/errors/customApiError.js)"
  },
  {
    "type": "globals",
    "fileName": "notFound.js",
    "folderName": "topmostsourcing-frontend/src/errors",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "NotFound.constructor",
    "className": "NotFound",
    "parentClassName": null,
    "fileName": "notFound.js",
    "folderName": "topmostsourcing-frontend/src/errors",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "constructor(message) {\r\n    super(message);\r\n    this.statusCode = StatusCodes.NOT_FOUND;\r\n  }"
  },
  {
    "type": "imports",
    "fileName": "unauthenticated.js",
    "folderName": "topmostsourcing-frontend/src/errors",
    "includingClasses": ["Unauthenticated"],
    "includingFunctions": [],
    "actualCode": "CustomApiError <- ./customApiError.js (topmostsourcing-frontend/src/errors/customApiError.js)"
  },
  {
    "type": "globals",
    "fileName": "unauthenticated.js",
    "folderName": "topmostsourcing-frontend/src/errors",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "Unauthenticated.constructor",
    "className": "Unauthenticated",
    "parentClassName": null,
    "fileName": "unauthenticated.js",
    "folderName": "topmostsourcing-frontend/src/errors",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "constructor(message) {\r\n    super(message);\r\n    this.statusCode = StatusCodes.FORBIDDEN;\r\n  }"
  },
  {
    "type": "imports",
    "fileName": "unauthorized.js",
    "folderName": "topmostsourcing-frontend/src/errors",
    "includingClasses": ["UnAuthorized"],
    "includingFunctions": [],
    "actualCode": "CustomApiError <- ./customApiError.js (topmostsourcing-frontend/src/errors/customApiError.js)"
  },
  {
    "type": "globals",
    "fileName": "unauthorized.js",
    "folderName": "topmostsourcing-frontend/src/errors",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "UnAuthorized.constructor",
    "className": "UnAuthorized",
    "parentClassName": null,
    "fileName": "unauthorized.js",
    "folderName": "topmostsourcing-frontend/src/errors",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "constructor(message) {\r\n    super(message);\r\n    this.statusCode = StatusCodes.UNAUTHORIZED;\r\n  }"
  },
  {
    "type": "imports",
    "fileName": "authenticate.js",
    "folderName": "topmostsourcing-frontend/src/middlewares",
    "includingClasses": [],
    "includingFunctions": ["authenticate", "authorizePermission"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "authenticate.js",
    "folderName": "topmostsourcing-frontend/src/middlewares",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "authenticate",
    "className": null,
    "parentClassName": null,
    "fileName": "authenticate.js",
    "folderName": "topmostsourcing-frontend/src/middlewares",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "(req, res, next) => {\r\n  const token = req.cookies.top_most_outsourcing_token;\r\n  if (!token) {\r\n    throw new Unauthenticated(\"User not authenticated\");\r\n  }\r\n  try {\r\n    const payload = isTokenValid(token);\r\n    req.user = {\r\n      userId: payload.userId,\r\n      role: payload.role,\r\n    };\r\n    next();\r\n  } catch (error) {\r\n    throw new Unauthenticated(\"Authentication failed\");\r\n  }\r\n}"
  },
  {
    "type": "function",
    "functionName": "authorizePermission",
    "className": null,
    "parentClassName": null,
    "fileName": "authenticate.js",
    "folderName": "topmostsourcing-frontend/src/middlewares",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "(...roles) => {\r\n  return (req, res, next) => {\r\n    if (!roles.includes(req.user.role)) {\r\n      throw new UnAuthorized(\"Authorization failed\");\r\n    }\r\n    next();\r\n  };\r\n}"
  },
  {
    "type": "imports",
    "fileName": "errorHandler.js",
    "folderName": "topmostsourcing-frontend/src/middlewares",
    "includingClasses": [],
    "includingFunctions": ["errorHandlerMiddleware"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "errorHandler.js",
    "folderName": "topmostsourcing-frontend/src/middlewares",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "errorHandlerMiddleware",
    "className": null,
    "parentClassName": null,
    "fileName": "errorHandler.js",
    "folderName": "topmostsourcing-frontend/src/middlewares",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(err, req, res, next) => {\r\n  let customError = {\r\n    message: err.message || \"Something went wrong\",\r\n    statusCode: err.statusCode || 500,\r\n  };\r\n  if (err.name === \"ValidationError\") {\r\n    customError.message = Object.values(err.errors)\r\n      .map((item) => item.message)\r\n      .join(\",\");\r\n    customError.statusCode = 400;\r\n  }\r\n  if (err.code === \"LIMIT_FILE_SIZE\") {\r\n    customError.message = \"File must be less then 512kb\";\r\n    customError.statusCode = 400;\r\n  }\r\n  if (err.code && err.code === 11000) {\r\n    customError.message = `Duplicate value entered for ${Object.keys(\r\n      err.keyValue\r\n    )} field, please choose another value`;\r\n    customError.statusCode = 400;\r\n  }\r\n  if (err.name === \"CastError\") {\r\n    customError.message = `No item found with id : ${err.value}`;\r\n    customError.statusCode = 404;\r\n  }\r\n  if (err instanceof SyntaxError && err.status === 400 && \"body\" in err) {\r\n    customError.message = \"Invalid JSON syntax\";\r\n    customError.statusCode = 400;\r\n  }\r\n\r\n  return res\r\n    .status(customError.statusCode)\r\n    .json({ message: customError.message });\r\n}"
  },
  {
    "type": "imports",
    "fileName": "routeNotFound.js",
    "folderName": "topmostsourcing-frontend/src/middlewares",
    "includingClasses": [],
    "includingFunctions": ["routeNotFound"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "routeNotFound.js",
    "folderName": "topmostsourcing-frontend/src/middlewares",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "routeNotFound",
    "className": null,
    "parentClassName": null,
    "fileName": "routeNotFound.js",
    "folderName": "topmostsourcing-frontend/src/middlewares",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(req, res) => {\r\n  res.status(404).send(\"Route not found\");\r\n}"
  },
  {
    "type": "imports",
    "fileName": "blog.js",
    "folderName": "topmostsourcing-frontend/src/models",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "mongoose <- mongoose (mongoose)"
  },
  {
    "type": "globals",
    "fileName": "blog.js",
    "folderName": "topmostsourcing-frontend/src/models",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "category.js",
    "folderName": "topmostsourcing-frontend/src/models",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "mongoose <- mongoose (mongoose)"
  },
  {
    "type": "globals",
    "fileName": "category.js",
    "folderName": "topmostsourcing-frontend/src/models",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "investments.js",
    "folderName": "topmostsourcing-frontend/src/models",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "mongoose <- mongoose (mongoose)"
  },
  {
    "type": "globals",
    "fileName": "investments.js",
    "folderName": "topmostsourcing-frontend/src/models",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "investor.js",
    "folderName": "topmostsourcing-frontend/src/models",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "mongoose <- mongoose (mongoose)"
  },
  {
    "type": "globals",
    "fileName": "investor.js",
    "folderName": "topmostsourcing-frontend/src/models",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "product-category.js",
    "folderName": "topmostsourcing-frontend/src/models",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "mongoose <- mongoose (mongoose)"
  },
  {
    "type": "globals",
    "fileName": "product-category.js",
    "folderName": "topmostsourcing-frontend/src/models",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "product-parent-category.js",
    "folderName": "topmostsourcing-frontend/src/models",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "mongoose <- mongoose (mongoose)"
  },
  {
    "type": "globals",
    "fileName": "product-parent-category.js",
    "folderName": "topmostsourcing-frontend/src/models",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-frontend/src/models",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "mongoose <- mongoose (mongoose)"
  },
  {
    "type": "globals",
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-frontend/src/models",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "product.js",
    "folderName": "topmostsourcing-frontend/src/models",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "mongoose <- mongoose (mongoose)"
  },
  {
    "type": "globals",
    "fileName": "product.js",
    "folderName": "topmostsourcing-frontend/src/models",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "roi.js",
    "folderName": "topmostsourcing-frontend/src/models",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "mongoose <- mongoose (mongoose)"
  },
  {
    "type": "globals",
    "fileName": "roi.js",
    "folderName": "topmostsourcing-frontend/src/models",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "user.js",
    "folderName": "topmostsourcing-frontend/src/models",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "mongoose <- mongoose (mongoose)\nbcrypt <- bcryptjs (bcryptjs)"
  },
  {
    "type": "globals",
    "fileName": "user.js",
    "folderName": "topmostsourcing-frontend/src/models",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "blog.route.js",
    "folderName": "topmostsourcing-frontend/src/routes",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "express <- express (express)"
  },
  {
    "type": "globals",
    "fileName": "blog.route.js",
    "folderName": "topmostsourcing-frontend/src/routes",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "category.route.js",
    "folderName": "topmostsourcing-frontend/src/routes",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "express <- express (express)"
  },
  {
    "type": "globals",
    "fileName": "category.route.js",
    "folderName": "topmostsourcing-frontend/src/routes",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "invest.route.js",
    "folderName": "topmostsourcing-frontend/src/routes",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "express <- express (express)"
  },
  {
    "type": "globals",
    "fileName": "invest.route.js",
    "folderName": "topmostsourcing-frontend/src/routes",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "investor.route.js",
    "folderName": "topmostsourcing-frontend/src/routes",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "express <- express (express)"
  },
  {
    "type": "globals",
    "fileName": "investor.route.js",
    "folderName": "topmostsourcing-frontend/src/routes",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "product-category.route.js",
    "folderName": "topmostsourcing-frontend/src/routes",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "express <- express (express)"
  },
  {
    "type": "globals",
    "fileName": "product-category.route.js",
    "folderName": "topmostsourcing-frontend/src/routes",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "product-parent-category.route.js",
    "folderName": "topmostsourcing-frontend/src/routes",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "express <- express (express)"
  },
  {
    "type": "globals",
    "fileName": "product-parent-category.route.js",
    "folderName": "topmostsourcing-frontend/src/routes",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-frontend/src/routes",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "express <- express (express)"
  },
  {
    "type": "globals",
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-frontend/src/routes",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "product.route.js",
    "folderName": "topmostsourcing-frontend/src/routes",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "express <- express (express)"
  },
  {
    "type": "globals",
    "fileName": "product.route.js",
    "folderName": "topmostsourcing-frontend/src/routes",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "roi.route.js",
    "folderName": "topmostsourcing-frontend/src/routes",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "express <- express (express)"
  },
  {
    "type": "globals",
    "fileName": "roi.route.js",
    "folderName": "topmostsourcing-frontend/src/routes",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "user.route.js",
    "folderName": "topmostsourcing-frontend/src/routes",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "express <- express (express)"
  },
  {
    "type": "globals",
    "fileName": "user.route.js",
    "folderName": "topmostsourcing-frontend/src/routes",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "blog.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "includingClasses": [],
    "includingFunctions": [
      "createBlogService",
      "getBlogService",
      "getAllBlogService",
      "getAllRelatedlogService",
      "updateBlogService",
      "deleteBlogService",
      "getBlogsCount"
    ],
    "actualCode": "path <- path (path)"
  },
  {
    "type": "globals",
    "fileName": "blog.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createBlogService",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (blogData) => {\r\n  const result = await Blog.create(blogData);\r\n  if (!result) {\r\n    throw new BadRequest(\"Error occured creating blog, retry using valid data\");\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getBlogService",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const blog = await Blog.findById(id);\r\n  if (!blog) {\r\n    throw new NotFound(`No blog found with id ${id}`);\r\n  }\r\n  return blog;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllBlogService",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async ({\r\n  page = 1,\r\n  limit = 10,\r\n  query = \"\",\r\n  category = null,\r\n}) => {\r\n  const skip = (page - 1) * limit;\r\n  let matchConditions = {};\r\n\r\n  if (query) {\r\n    matchConditions.title = { $regex: query, $options: \"i\" };\r\n  }\r\n  if (category) {\r\n    matchConditions.category = { $regex: category, $options: \"i\" };\r\n  }\r\n  const blogs = await Blog.find(matchConditions)\r\n    .skip(skip)\r\n    .limit(limit)\r\n    .sort({ createdAt: -1 });\r\n\r\n  const totalCount = await Blog.countDocuments(matchConditions);\r\n  const totalPages = Math.ceil(totalCount / limit);\r\n\r\n  if (!blogs) {\r\n    return [];\r\n  }\r\n\r\n  return {\r\n    blogs,\r\n    pagination: {\r\n      totalPages,\r\n      page,\r\n      limit,\r\n      hasNextPage: page < totalPages,\r\n      hasPreviousPage: page > 1,\r\n    },\r\n  };\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllRelatedlogService",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async ({\r\n  page = 1,\r\n  limit = 0,\r\n  skipValue = 3,\r\n  query = \"\",\r\n  category = null,\r\n  id = null,\r\n}) => {\r\n  const skip = (page - 1) * skipValue;\r\n  let matchConditions = {};\r\n  if (query) {\r\n    matchConditions.title = { $regex: query, $options: \"i\" };\r\n  }\r\n  if (category) {\r\n    matchConditions.category = { $regex: category, $options: \"i\" };\r\n  }\r\n  if (id) {\r\n    matchConditions._id = { $ne: id };\r\n  }\r\n  const blogs = await Blog.find(matchConditions)\r\n    .skip(skip)\r\n    .limit(limit)\r\n    .sort({ createdAt: -1 });\r\n  if (!blogs) {\r\n    return [];\r\n  }\r\n  return blogs;\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateBlogService",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": ["path"],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (blogData, id) => {\r\n  const oldBlog = await Blog.findById(id);\r\n  if (!oldBlog) {\r\n    throw new NotFound(`No blog found with id ${id}`);\r\n  }\r\n  if (blogData.imageUrl) {\r\n    try {\r\n      const imagePath = path.join(process.cwd(), \"uploads\", oldBlog.imageUrl);\r\n      unlink(imagePath, (err) => {\r\n        if (err) {\r\n          console.log(err.message);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  const updatedBlog = await Blog.findByIdAndUpdate(id, blogData, {\r\n    new: true,\r\n    runValidators: true,\r\n  });\r\n  if (!updatedBlog) {\r\n    throw new BadRequest(\"Error updating blog, retry using valid data\");\r\n  }\r\n  return updatedBlog;\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteBlogService",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": ["path"],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const oldBlog = await Blog.findById(id);\r\n  if (!oldBlog) {\r\n    throw new NotFound(`No blog found with id ${id}`);\r\n  }\r\n  try {\r\n    const imagePath = path.join(process.cwd(), \"uploads\", oldBlog.imageUrl);\r\n    unlink(imagePath, (err) => {\r\n      if (err) {\r\n        console.log(\"No Image found in storage\");\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n\r\n  const result = await Blog.findByIdAndDelete(id);\r\n  if (!result) {\r\n    throw new BadRequest(`No blog found with id ${id}`);\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getBlogsCount",
    "className": null,
    "parentClassName": null,
    "fileName": "blog.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async () => {\r\n  const count = await Blog.countDocuments();\r\n  return count;\r\n}"
  },
  {
    "type": "imports",
    "fileName": "category.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "includingClasses": [],
    "includingFunctions": [
      "createCategoryService",
      "getCategoryService",
      "getAllCategoryService",
      "updateCategoryService",
      "deleteCategoryService",
      "getCategoryCount"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "category.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "category.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (categoryData) => {\r\n  const result = await Category.create(categoryData);\r\n  if (!result) {\r\n    throw new BadRequest(\r\n      \"Error occured creating category, retry using valid data\"\r\n    );\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "category.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const category = await Category.findById(id);\r\n  if (!category) {\r\n    throw new NotFound(`No category found with id ${id}`);\r\n  }\r\n  return category;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "category.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (page = 1, limit = 0, query = \"\") => {\r\n  const skip = (page - 1) * 10;\r\n  let matchConditions = {};\r\n  if (query) {\r\n    matchConditions = { name: { $regex: query, $options: \"i\" } };\r\n  }\r\n  const categories = await Category.find(matchConditions)\r\n    .skip(skip)\r\n    .limit(limit);\r\n  if (!categories) {\r\n    return [];\r\n  }\r\n  return categories;\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "category.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (categoryData, id) => {\r\n  const updatedCategory = await Category.findByIdAndUpdate(id, categoryData, {\r\n    new: true,\r\n    runValidators: true,\r\n  });\r\n  if (!updatedCategory) {\r\n    throw new BadRequest(\"Error updating category, retry using valid data\");\r\n  }\r\n  return updatedCategory;\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "category.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const result = await Category.findByIdAndDelete(id);\r\n  if (!result) {\r\n    throw new BadRequest(`No category found with id ${id}`);\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getCategoryCount",
    "className": null,
    "parentClassName": null,
    "fileName": "category.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async () => {\r\n  const count = await Category.countDocuments();\r\n  return count;\r\n}"
  },
  {
    "type": "imports",
    "fileName": "invest.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "includingClasses": [],
    "includingFunctions": [
      "createInvest",
      "updateInvest",
      "getAllInvest",
      "withdrawFunds"
    ],
    "actualCode": "NotFound <- ../errors/notFound.js (topmostsourcing-frontend/src/errors/notFound.js)"
  },
  {
    "type": "globals",
    "fileName": "invest.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createInvest",
    "className": null,
    "parentClassName": null,
    "fileName": "invest.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": ["../errors/notFound.js"],
      "crossFileImports": [
        "topmostsourcing-frontend/src/errors/notFound.js",
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (data) => {\r\n  const investor = await Investor.findById(data.investor);\r\n  if (!investor) {\r\n    throw new NotFound(\"Investor not found\");\r\n  }\r\n\r\n  const invest = await Investments.create({\r\n    investor: data.investor,\r\n    amount: Number(data.amount || 0),\r\n    returns: Number(data.amount || 0) * investor.roi,\r\n    investRange: data.investRange,\r\n    status: investmentStatus.APPLIED,\r\n    investPeriod: data.investPeriod,\r\n  });\r\n  return invest;\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateInvest",
    "className": null,
    "parentClassName": null,
    "fileName": "invest.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": ["../errors/notFound.js"],
      "crossFileImports": [
        "topmostsourcing-frontend/src/errors/notFound.js",
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id, data) => {\r\n  const invest = await Investments.findById(id);\r\n  if (!invest) {\r\n    throw new NotFound(\"Investment not found\");\r\n  }\r\n\r\n  let prevStatus = invest.status;\r\n\r\n  const investor = await Investor.findById(invest.investor);\r\n  if (!investor) {\r\n    throw new NotFound(\"Investor not found\");\r\n  }\r\n\r\n  if (data.investPeriod) invest.investPeriod = data.investPeriod;\r\n  if (data.status) invest.status = data.status;\r\n  if (data.status === investmentStatus.PAID && data.amount) {\r\n    invest.amount = data.amount;\r\n    invest.returns = data.amount * investor.roi;\r\n  }\r\n\r\n  if (\r\n    data.status &&\r\n    prevStatus === investmentStatus.PENDING &&\r\n    data.status === investmentStatus.PAID\r\n  ) {\r\n    investor.totalInvestment += invest.amount;\r\n    investor.totalReturns += invest.returns;\r\n    investor.pendingReturns += invest.returns;\r\n  } else if (\r\n    data.status &&\r\n    prevStatus === investmentStatus.WITHDRAW_REQUESTED &&\r\n    data.status === investmentStatus.WITHDRAWABLE\r\n  ) {\r\n    investor.withdrawableAmount += invest.amount + invest.returns;\r\n  }\r\n  await investor.save();\r\n  await invest.save();\r\n\r\n  return invest;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllInvest",
    "className": null,
    "parentClassName": null,
    "fileName": "invest.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (investorId) => {\r\n  const investments = await Investments.find({\r\n    investor: investorId,\r\n  })\r\n    .sort({ createdAt: -1 })\r\n    .populate(\"investor\");\r\n\r\n  return investments;\r\n}"
  },
  {
    "type": "function",
    "functionName": "withdrawFunds",
    "className": null,
    "parentClassName": null,
    "fileName": "invest.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (investorId) => {\r\n  const updatedInvests = await Investments.updateMany(\r\n    { investor: investorId, status: investmentStatus.WITHDRAWABLE },\r\n    { status: investmentStatus.WITHDRAWN },\r\n    { multi: true }\r\n  );\r\n  return updatedInvests;\r\n}"
  },
  {
    "type": "imports",
    "fileName": "investor.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "includingClasses": [],
    "includingFunctions": [
      "generateId",
      "createInvestor",
      "loginInvestor",
      "getInvestor"
    ],
    "actualCode": "BadRequest <- ../errors/badRequest.js (topmostsourcing-frontend/src/errors/badRequest.js)\nNotFound <- ../errors/notFound.js (topmostsourcing-frontend/src/errors/notFound.js)\ncrypto <- crypto (crypto)"
  },
  {
    "type": "globals",
    "fileName": "investor.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "generateId",
    "className": null,
    "parentClassName": null,
    "fileName": "investor.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": ["crypto"],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async function generateId() {\r\n  const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n  let id = \"\";\r\n  const bytes = crypto.randomBytes(8);\r\n\r\n  for (let i = 0; i < 8; i++) {\r\n    id += chars[bytes[i] % chars.length];\r\n  }\r\n\r\n  const idExists = await Investor.findOne({ publicId: id });\r\n\r\n  if (idExists) {\r\n    return generateId();\r\n  } else {\r\n    return id;\r\n  }\r\n}"
  },
  {
    "type": "function",
    "functionName": "createInvestor",
    "className": null,
    "parentClassName": null,
    "fileName": "investor.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (data) => {\r\n  const uniqueId = await generateId();\r\n  const investor = await Investor.create({\r\n    ...data,\r\n    publicId: `INV${uniqueId}`,\r\n  });\r\n\r\n  if (data.investRange) {\r\n    await investService.createInvest({\r\n      investor: investor._id,\r\n      investRange: data.investRange,\r\n      investPeriod: data.investPeriod,\r\n    });\r\n  }\r\n  return investor;\r\n}"
  },
  {
    "type": "function",
    "functionName": "loginInvestor",
    "className": null,
    "parentClassName": null,
    "fileName": "investor.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": ["../errors/badRequest.js", "../errors/notFound.js"],
      "crossFileImports": [
        "topmostsourcing-frontend/src/errors/badRequest.js",
        "topmostsourcing-frontend/src/errors/notFound.js",
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (phone) => {\r\n  if (!phone) {\r\n    throw new BadRequest(\"Please provide phone number\");\r\n  }\r\n\r\n  const investor = await Investor.findOne({ phone });\r\n  if (!investor) {\r\n    throw new NotFound(\"Investor not found\");\r\n  }\r\n  return investor;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getInvestor",
    "className": null,
    "parentClassName": null,
    "fileName": "investor.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": ["../errors/notFound.js"],
      "crossFileImports": [
        "topmostsourcing-frontend/src/errors/notFound.js",
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const investor = await Investor.findById(id);\r\n  if (!investor) {\r\n    throw new NotFound(\"Investor not found\");\r\n  }\r\n  return investor;\r\n}"
  },
  {
    "type": "imports",
    "fileName": "product-category.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "includingClasses": [],
    "includingFunctions": [
      "createProductCategoryService",
      "getProductCategoryService",
      "getAllProductCategoryService",
      "updateProductCategoryService",
      "deleteProductCategoryService",
      "getProductCategoryCountService"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "product-category.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createProductCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (categoryData) => {\r\n  const result = await ProductCategory.create(categoryData);\r\n  if (!result) {\r\n    throw new BadRequest(\r\n      \"Error occured creating category, retry using valid data\"\r\n    );\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const category = await ProductCategory.findById(id);\r\n  if (!category) {\r\n    throw new NotFound(`No category found with id ${id}`);\r\n  }\r\n  return category;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllProductCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (\r\n  page = 1,\r\n  limit = 0,\r\n  query = \"\",\r\n  skipValue = 10,\r\n  parent = \"\"\r\n) => {\r\n  const skip = (page - 1) * skipValue;\r\n  let matchConditions = {};\r\n  if (query) {\r\n    matchConditions = { name: { $regex: query, $options: \"i\" } };\r\n  }\r\n  if (parent) {\r\n    matchConditions = { parentCategory: parent };\r\n  }\r\n  const categories = await ProductCategory.find(matchConditions)\r\n    .skip(skip)\r\n    .limit(limit)\r\n    .sort({ createdAt: -1 });\r\n  if (!categories) {\r\n    return [];\r\n  }\r\n  return categories;\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateProductCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (categoryData, id) => {\r\n  const updatedCategory = await ProductCategory.findByIdAndUpdate(\r\n    id,\r\n    categoryData,\r\n    {\r\n      new: true,\r\n      runValidators: true,\r\n    }\r\n  );\r\n  if (!updatedCategory) {\r\n    throw new BadRequest(\"Error updating category, retry using valid data\");\r\n  }\r\n  return updatedCategory;\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteProductCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const result = await ProductCategory.findByIdAndDelete(id);\r\n  if (!result) {\r\n    throw new BadRequest(`No category found with id ${id}`);\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductCategoryCountService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-category.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async () => {\r\n  const count = await ProductCategory.countDocuments();\r\n  return count;\r\n}"
  },
  {
    "type": "imports",
    "fileName": "product-parent-category.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "includingClasses": [],
    "includingFunctions": [
      "createProductParentCategoryService",
      "getProductParentCategoryService",
      "getAllProductParentCategoryService",
      "updateProductParentCategoryService",
      "deleteProductParentCategoryService",
      "getProductParentCategoryCountService"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "product-parent-category.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createProductParentCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (categoryData) => {\r\n  const result = await ProductParentCategory.create(categoryData);\r\n  if (!result) {\r\n    throw new BadRequest(\r\n      \"Error occured creating parent category, retry using valid data\"\r\n    );\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductParentCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const category = await ProductParentCategory.findById(id);\r\n  if (!category) {\r\n    throw new NotFound(`No parent category found with id ${id}`);\r\n  }\r\n  return category;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllProductParentCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (\r\n  page = 1,\r\n  limit = 0,\r\n  query = \"\",\r\n  skipValue = 10\r\n) => {\r\n  const skip = (page - 1) * skipValue;\r\n  let matchConditions = {};\r\n  if (query) {\r\n    matchConditions = { name: { $regex: query, $options: \"i\" } };\r\n  }\r\n  const categories = await ProductParentCategory.find(matchConditions)\r\n    .skip(skip)\r\n    .limit(limit);\r\n  if (!categories) {\r\n    return [];\r\n  }\r\n  return categories;\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateProductParentCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (categoryData, id) => {\r\n  const updatedCategory = await ProductParentCategory.findByIdAndUpdate(\r\n    id,\r\n    categoryData,\r\n    {\r\n      new: true,\r\n      runValidators: true,\r\n    }\r\n  );\r\n  if (!updatedCategory) {\r\n    throw new BadRequest(\r\n      \"Error updating parent category, retry using valid data\"\r\n    );\r\n  }\r\n  return updatedCategory;\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteProductParentCategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const result = await ProductParentCategory.findByIdAndDelete(id);\r\n  if (!result) {\r\n    throw new BadRequest(`No category found with id ${id}`);\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductParentCategoryCountService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-parent-category.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async () => {\r\n  const count = await ProductParentCategory.countDocuments();\r\n  return count;\r\n}"
  },
  {
    "type": "imports",
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "includingClasses": [],
    "includingFunctions": [
      "createProductSubcategoryService",
      "getProductSubcategoryService",
      "getAllProductSubcategoryService",
      "updateProductSubcategoryService",
      "deleteProductSubcategoryService",
      "getProductSubcategoryCountService"
    ],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createProductSubcategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (categoryData) => {\r\n  const result = await ProductSubcategory.create(categoryData);\r\n  if (!result) {\r\n    throw new BadRequest(\r\n      \"Error occured creating subcategory, retry using valid data\"\r\n    );\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductSubcategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const subcategory = await ProductSubcategory.findById(id);\r\n  if (!subcategory) {\r\n    throw new NotFound(`No subcategory found with id ${id}`);\r\n  }\r\n  return subcategory;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllProductSubcategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (\r\n  page = 1,\r\n  limit = 0,\r\n  query = \"\",\r\n  skipValue = 10,\r\n  parent = \"\"\r\n) => {\r\n  const skip = (page - 1) * skipValue;\r\n  let matchConditions = {};\r\n  if (query) {\r\n    matchConditions = { name: { $regex: query, $options: \"i\" } };\r\n  }\r\n  if (parent) {\r\n    matchConditions = { category: parent };\r\n  }\r\n  const categories = await ProductSubcategory.find(matchConditions)\r\n    .skip(skip)\r\n    .limit(limit)\r\n    .populate(\"category\");\r\n  if (!categories) {\r\n    return [];\r\n  }\r\n  return categories;\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateProductSubcategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (categoryData, id) => {\r\n  const updatedCategory = await ProductSubcategory.findByIdAndUpdate(\r\n    id,\r\n    categoryData,\r\n    {\r\n      new: true,\r\n      runValidators: true,\r\n    }\r\n  );\r\n  if (!updatedCategory) {\r\n    throw new BadRequest(\"Error updating subcategory, retry using valid data\");\r\n  }\r\n  return updatedCategory;\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteProductSubcategoryService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const result = await ProductSubcategory.findByIdAndDelete(id);\r\n  if (!result) {\r\n    throw new BadRequest(`No subcategory found with id ${id}`);\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductSubcategoryCountService",
    "className": null,
    "parentClassName": null,
    "fileName": "product-subcategory.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async () => {\r\n  const count = await ProductSubcategory.countDocuments();\r\n  return count;\r\n}"
  },
  {
    "type": "imports",
    "fileName": "product.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "includingClasses": [],
    "includingFunctions": [
      "createProductService",
      "getProductService",
      "getAllProductService",
      "getAllProductExceptOneService",
      "updateProductService",
      "updateSecondaryImagesService",
      "deleteProductService",
      "getProductCount",
      "requestQuotationService"
    ],
    "actualCode": "nodemailer <- nodemailer (nodemailer)\npath <- path (path)"
  },
  {
    "type": "globals",
    "fileName": "product.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createProductService",
    "className": null,
    "parentClassName": null,
    "fileName": "product.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (productData) => {\r\n  const result = await Product.create(productData);\r\n  if (!result) {\r\n    throw new BadRequest(\r\n      \"Error occured creating product, retry using valid data\"\r\n    );\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductService",
    "className": null,
    "parentClassName": null,
    "fileName": "product.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": ["path"],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const product = await Product.findById(id).populate({\r\n    path: \"subcategory\",\r\n    populate: {\r\n      path: \"category\",\r\n      populate: {\r\n        path: \"parentCategory\",\r\n      },\r\n    },\r\n  });\r\n  if (!product) {\r\n    throw new NotFound(`No product found with id ${id}`);\r\n  }\r\n  return product;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllProductService",
    "className": null,
    "parentClassName": null,
    "fileName": "product.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async ({\r\n  page = 1,\r\n  limit = 0,\r\n  skipValue = 1000,\r\n  query = \"\",\r\n  category = \"\",\r\n  parentCategory = \"\",\r\n  subcategory = \"\",\r\n}) => {\r\n  const skip = (page - 1) * skipValue;\r\n  let matchConditions = {};\r\n  if (query) {\r\n    matchConditions.name = { $regex: query, $options: \"i\" };\r\n  }\r\n  if (category) {\r\n    matchConditions.category = category;\r\n  }\r\n  if (parentCategory) {\r\n    matchConditions.parentCategory = parentCategory;\r\n  }\r\n  if (subcategory) {\r\n    matchConditions.subcategory = subcategory;\r\n  }\r\n  const products = await Product.find(matchConditions)\r\n    .skip(skip)\r\n    .limit(limit)\r\n    .sort({ createdAt: -1 })\r\n    .populate(\"subcategory\")\r\n    .populate(\"category\")\r\n    .populate(\"parentCategory\");\r\n\r\n  return products;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllProductExceptOneService",
    "className": null,
    "parentClassName": null,
    "fileName": "product.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async ({\r\n  page = 1,\r\n  limit = 0,\r\n  skipValue = 10,\r\n  query = \"\",\r\n  category = \"\",\r\n  id = null,\r\n}) => {\r\n  const skip = (page - 1) * skipValue;\r\n  let matchConditions = {};\r\n  if (query) {\r\n    matchConditions.name = { $regex: query, $options: \"i\" };\r\n  }\r\n  if (category) {\r\n    matchConditions.category = category;\r\n  }\r\n  if (id) {\r\n    matchConditions._id = { $ne: id };\r\n  }\r\n  const products = await Product.find(matchConditions)\r\n    .skip(skip)\r\n    .limit(limit)\r\n    .sort({ createdAt: -1 })\r\n    .populate(\"subcategory\")\r\n    .populate(\"category\")\r\n    .populate(\"parentCategory\");\r\n  return products;\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateProductService",
    "className": null,
    "parentClassName": null,
    "fileName": "product.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": ["path"],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (productData, id) => {\r\n  const oldProduct = await Product.findById(id);\r\n  if (!oldProduct) {\r\n    throw new NotFound(`No product found with id ${id}`);\r\n  }\r\n  if (productData.imageUrl) {\r\n    try {\r\n      const imagePath = path.join(\r\n        process.cwd(),\r\n        \"uploads\",\r\n        oldProduct.imageUrl\r\n      );\r\n      unlink(imagePath, (err) => {\r\n        if (err) {\r\n          console.log(err.message);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  if (productData.secondaryImages) {\r\n    productData.secondaryImages = [\r\n      ...oldProduct.secondaryImages,\r\n      ...productData.secondaryImages,\r\n    ];\r\n  }\r\n  const updatedProduct = await Product.findByIdAndUpdate(id, productData, {\r\n    new: true,\r\n  });\r\n  if (!updatedProduct) {\r\n    throw new BadRequest(\"Error updating product, retry using valid data\");\r\n  }\r\n  return updatedProduct;\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateSecondaryImagesService",
    "className": null,
    "parentClassName": null,
    "fileName": "product.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": ["path"],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (image, id) => {\r\n  const oldProduct = await Product.findById(id);\r\n  if (!oldProduct) {\r\n    throw new NotFound(`No product found with id ${id}`);\r\n  }\r\n  if (image) {\r\n    try {\r\n      const imagePath = path.join(process.cwd(), \"uploads\", image);\r\n      unlink(imagePath, (err) => {\r\n        if (err) {\r\n          console.log(err.message);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  let updatedSecondaryImages = oldProduct?.secondaryImages?.filter(\r\n    (prevImage) => prevImage !== image\r\n  );\r\n  const updatedProduct = await Product.findByIdAndUpdate(\r\n    id,\r\n    { secondaryImages: updatedSecondaryImages },\r\n    {\r\n      new: true,\r\n    }\r\n  );\r\n  if (!updatedProduct) {\r\n    throw new BadRequest(\"Error updating product, retry using valid data\");\r\n  }\r\n  return image;\r\n}"
  },
  {
    "type": "function",
    "functionName": "deleteProductService",
    "className": null,
    "parentClassName": null,
    "fileName": "product.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": ["path"],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (id) => {\r\n  const oldProduct = await Product.findById(id);\r\n  if (!oldProduct) {\r\n    throw new NotFound(`No product found with id ${id}`);\r\n  }\r\n  try {\r\n    const imagePath = path.join(process.cwd(), \"uploads\", oldProduct.imageUrl);\r\n    unlink(imagePath, (err) => {\r\n      if (err) {\r\n        console.log(err.message);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n\r\n  const result = await Product.findByIdAndDelete(id);\r\n  if (!result) {\r\n    throw new BadRequest(`No product found with id ${id}`);\r\n  }\r\n  return result;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getProductCount",
    "className": null,
    "parentClassName": null,
    "fileName": "product.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async ({\r\n  query = \"\",\r\n  category = \"\",\r\n  parentCategory = \"\",\r\n  subcategory = \"\",\r\n}) => {\r\n  let matchConditions = {};\r\n  if (query) {\r\n    matchConditions.name = { $regex: query, $options: \"i\" };\r\n  }\r\n  if (category) {\r\n    matchConditions.category = category;\r\n  }\r\n  if (parentCategory) {\r\n    matchConditions.parentCategory = parentCategory;\r\n  }\r\n  if (subcategory) {\r\n    matchConditions.subcategory = subcategory;\r\n  }\r\n  const count = await Product.find(matchConditions).countDocuments();\r\n  return count;\r\n}"
  },
  {
    "type": "function",
    "functionName": "requestQuotationService",
    "className": null,
    "parentClassName": null,
    "fileName": "product.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": ["nodemailer"],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (requestData) => {\r\n  const {\r\n    name,\r\n    email,\r\n    phone,\r\n    title,\r\n    price,\r\n    quantity,\r\n    date,\r\n    description,\r\n    tags,\r\n    payment,\r\n    country,\r\n    city,\r\n    uploadedFiles,\r\n  } = requestData;\r\n\r\n  if (\r\n    !name ||\r\n    !email ||\r\n    !phone ||\r\n    !title ||\r\n    !price ||\r\n    !quantity ||\r\n    !date ||\r\n    !description ||\r\n    !tags ||\r\n    !payment ||\r\n    !country ||\r\n    !city\r\n  ) {\r\n    throw new BadRequest(\"Proper details not provided\");\r\n  }\r\n\r\n  const fileLinks =\r\n    uploadedFiles.length > 0\r\n      ? `\r\n      <p><strong>Product files:</strong></p>\r\n      <ul>\r\n        ${uploadedFiles\r\n          .map(\r\n            (file) => `\r\n          <li><a href=\"http://192.168.0.104:3001/${file}\">Download ${file}</a></li>\r\n        `\r\n          )\r\n          .join(\"\")}\r\n      </ul>\r\n    `\r\n      : \"\";\r\n\r\n  const transporter = nodemailer.createTransport({\r\n    host: process.env.SMTP_HOST,\r\n    port: process.env.SMTP_PORT,\r\n    service: process.env.SMTP_SERVICE,\r\n    auth: {\r\n      user: process.env.SMTP_MAIL,\r\n      pass: process.env.SMTP_PASS,\r\n    },\r\n  });\r\n\r\n  const mailOptions = {\r\n    from: process.env.SMTP_MAIL,\r\n    replyTo: requestData.email,\r\n    to: process.env.SMTP_MAIL,\r\n    subject: \"Request for Quotation\",\r\n    html: `\r\n      <h1>New Message from ${name}</h1>\r\n      <p><strong>Email:</strong> ${email}</p>\r\n      <p><strong>Phone:</strong> ${phone}</p>\r\n      <p><strong>Product files:</strong></p>\r\n      ${fileLinks}\r\n      <p><strong>Product title:</strong> ${title}</p>\r\n      <p><strong>Product description:</strong> ${description}</p>\r\n      <p><strong>Product tags:</strong> ${tags}</p>\r\n      <p><strong>Product quantity:</strong> ${quantity}</p>\r\n      <p><strong>Product price:</strong> ${price}</p>\r\n      <p><strong>Expected delivery date:</strong> ${date}</p>\r\n      <p><strong>Payment method:</strong> ${payment}</p>\r\n      <p><strong>Country:</strong> ${country}</p>\r\n      <p><strong>City:</strong> ${city}</p>\r\n    `,\r\n  };\r\n\r\n  await transporter.sendMail(mailOptions);\r\n  return true;\r\n}"
  },
  {
    "type": "imports",
    "fileName": "roi.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "includingClasses": [],
    "includingFunctions": ["createRoi", "updateRoi", "getAllRoi"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "roi.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createRoi",
    "className": null,
    "parentClassName": null,
    "fileName": "roi.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (data) => {\r\n  const roi = await Roi.create({ roi: data.roi / 100 });\r\n  return roi;\r\n}"
  },
  {
    "type": "function",
    "functionName": "updateRoi",
    "className": null,
    "parentClassName": null,
    "fileName": "roi.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async (id, data) => {\r\n  const roi = await Roi.findById(id);\r\n  if (!roi) {\r\n    throw new Error(\"Roi not found\");\r\n  }\r\n\r\n  roi.roi = data.roi;\r\n  await roi.save();\r\n  return roi;\r\n}"
  },
  {
    "type": "function",
    "functionName": "getAllRoi",
    "className": null,
    "parentClassName": null,
    "fileName": "roi.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async () => {\r\n  const rois = await Roi.find({}).sort({ createdAt: -1 });\r\n  return rois;\r\n}"
  },
  {
    "type": "imports",
    "fileName": "user.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "includingClasses": [],
    "includingFunctions": ["loginUser", "sendMailService"],
    "actualCode": "nodemailer <- nodemailer (nodemailer)"
  },
  {
    "type": "globals",
    "fileName": "user.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "loginUser",
    "className": null,
    "parentClassName": null,
    "fileName": "user.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js",
        "topmostsourcing-frontend/app/not-found.tsx",
        "topmostsourcing-backend/src/utils/index.js",
        "topmostsourcing-frontend/src/utils/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "async (req) => {\r\n  const { username, password } = req.body;\r\n  if (!username || !password) {\r\n    throw new BadRequest(\"Please provide credentials\");\r\n  }\r\n  const userExist = await User.findOne({\r\n    $or: [{ username }, { email: username }],\r\n  });\r\n  if (!userExist) {\r\n    throw new NotFound(\"Invalid username or email\");\r\n  }\r\n  const passwordMatched = await userExist.comparePassword(password);\r\n  if (!passwordMatched) {\r\n    throw new BadRequest(\"Invalid password\");\r\n  }\r\n  const tokenUser = createTokenUser(userExist);\r\n  return tokenUser;\r\n}"
  },
  {
    "type": "function",
    "functionName": "sendMailService",
    "className": null,
    "parentClassName": null,
    "fileName": "user.service.js",
    "folderName": "topmostsourcing-frontend/src/services",
    "upstreamDependencies": {
      "imports": ["nodemailer"],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "async ({ name, email, phone, subject, mailText }) => {\r\n  const transporter = nodemailer.createTransport({\r\n    host: process.env.SMTP_HOST,\r\n    port: process.env.SMTP_PORT,\r\n    service: process.env.SMTP_SERVICE,\r\n    auth: {\r\n      user: process.env.SMTP_MAIL,\r\n      pass: process.env.SMTP_PASS,\r\n    },\r\n  });\r\n  const mailOptions = {\r\n    from: email,\r\n    to: process.env.SMTP_MAIL,\r\n    subject: subject,\r\n    html: `\r\n      <h1>New Message from ${name}</h1>\r\n      <p><strong>Name:</strong> ${name}</p>\r\n      <p><strong>Email:</strong> ${email}</p>\r\n      <p><strong>Phone:</strong> ${phone}</p>\r\n      <p><strong>Message:</strong></p>\r\n      <p>${mailText}</p>\r\n    `,\r\n  };\r\n  await transporter.sendMail(mailOptions);\r\n  return true;\r\n}"
  },
  {
    "type": "imports",
    "fileName": "checkPermission.js",
    "folderName": "topmostsourcing-frontend/src/utils",
    "includingClasses": [],
    "includingFunctions": ["checkPermission"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "checkPermission.js",
    "folderName": "topmostsourcing-frontend/src/utils",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "checkPermission",
    "className": null,
    "parentClassName": null,
    "fileName": "checkPermission.js",
    "folderName": "topmostsourcing-frontend/src/utils",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": [
        "topmostsourcing-backend/src/errors/index.js",
        "topmostsourcing-frontend/src/errors/index.js"
      ]
    },
    "globalVariables": [],
    "actualCode": "(requestUser, resourceUserId) => {\r\n  if (requestUser.role === \"ADMIN\") return;\r\n  if (requestUser.userId === resourceUserId.toString()) return;\r\n  throw new UnAuthorized(\"Not authorized to perform this action\");\r\n}"
  },
  {
    "type": "imports",
    "fileName": "createTokenUser.js",
    "folderName": "topmostsourcing-frontend/src/utils",
    "includingClasses": [],
    "includingFunctions": ["createTokenUser"],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "createTokenUser.js",
    "folderName": "topmostsourcing-frontend/src/utils",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createTokenUser",
    "className": null,
    "parentClassName": null,
    "fileName": "createTokenUser.js",
    "folderName": "topmostsourcing-frontend/src/utils",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(user) => {\r\n  return { userId: user._id, role: user.role };\r\n}"
  },
  {
    "type": "imports",
    "fileName": "index.js",
    "folderName": "topmostsourcing-frontend/src/utils",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "index.js",
    "folderName": "topmostsourcing-frontend/src/utils",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "jwt.js",
    "folderName": "topmostsourcing-frontend/src/utils",
    "includingClasses": [],
    "includingFunctions": [
      "createToken",
      "isTokenValid",
      "attachCookiesToResponse"
    ],
    "actualCode": "jwt <- jsonwebtoken (jsonwebtoken)"
  },
  {
    "type": "globals",
    "fileName": "jwt.js",
    "folderName": "topmostsourcing-frontend/src/utils",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "function",
    "functionName": "createToken",
    "className": null,
    "parentClassName": null,
    "fileName": "jwt.js",
    "folderName": "topmostsourcing-frontend/src/utils",
    "upstreamDependencies": {
      "imports": ["jsonwebtoken"],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(payload) => {\r\n  return jwt.sign(payload, config.jwtSecret, {\r\n    expiresIn: config.jwtExpiry,\r\n  });\r\n}"
  },
  {
    "type": "function",
    "functionName": "isTokenValid",
    "className": null,
    "parentClassName": null,
    "fileName": "jwt.js",
    "folderName": "topmostsourcing-frontend/src/utils",
    "upstreamDependencies": {
      "imports": ["jsonwebtoken"],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "(token) => {\r\n  return jwt.verify(token, config.jwtSecret);\r\n}"
  },
  {
    "type": "function",
    "functionName": "attachCookiesToResponse",
    "className": null,
    "parentClassName": null,
    "fileName": "jwt.js",
    "folderName": "topmostsourcing-frontend/src/utils",
    "upstreamDependencies": {
      "imports": [],
      "crossFileImports": []
    },
    "globalVariables": [],
    "actualCode": "({ res, user }) => {\r\n  const token = createToken(user);\r\n  res.cookie(\"top_most_outsourcing_token\", token, {\r\n    httpOnly: true,\r\n    sameSite: \"None\",\r\n    secure: true,\r\n    domain: \".topmostsourcing.com\",\r\n    maxAge: 30 * 24 * 60 * 60 * 1000,\r\n  });\r\n}"
  },
  {
    "type": "imports",
    "fileName": "multer.js",
    "folderName": "topmostsourcing-frontend/src/utils",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": "multer <- multer (multer)\npath <- path (path)"
  },
  {
    "type": "globals",
    "fileName": "multer.js",
    "folderName": "topmostsourcing-frontend/src/utils",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "investor-store.ts",
    "folderName": "topmostsourcing-frontend/store",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "investor-store.ts",
    "folderName": "topmostsourcing-frontend/store",
    "variables": [],
    "actualCode": ""
  },
  {
    "type": "imports",
    "fileName": "data-types.ts",
    "folderName": "topmostsourcing-frontend/types",
    "includingClasses": [],
    "includingFunctions": [],
    "actualCode": ""
  },
  {
    "type": "globals",
    "fileName": "data-types.ts",
    "folderName": "topmostsourcing-frontend/types",
    "variables": [],
    "actualCode": ""
  }
]
